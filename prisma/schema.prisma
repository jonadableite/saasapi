generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                        String             @id @default(uuid())
  name                      String
  active                    Boolean?           @default(true)
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  whatleadparceiroconfigs   CompaniesUnites[]
  WhatleadUser              User[]

  @@index([createdAt(sort: Desc)])
  @@map("whatlead_companies")
}

model User {
  id                        String             @id @default(uuid())
  company                   Company            @relation(fields: [whatleadCompanyId], references: [id])
  email                     String             @unique
  name                      String
  password                  String
  profile                   String
  phone                     String
  stripeCustomerId          String?
  stripeSubscriptionId      String?
  stripeSubscriptionStatus  String?
  active                    Boolean?           @default(true)
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  whatleadCompanyId         String
  plan                      String             @default("free")
  status                    Boolean            @default(true)
  maxInstances              Int                @default(2)
  messagesPerDay            Int                @default(20)
  features                  String[]           @default([])
  support                   String             @default("basic")
  trialEndDate              DateTime?
  instances                 Instance[]
  warmupStats               WarmupStats[]
  payments                  Payment[]

  @@index([email, profile, phone, createdAt(sort: Desc)])
  @@map("whatlead_users")
}

model CompaniesUnites {
  id                        String             @id @default(uuid())
  company                   Company?           @relation(fields: [whatleadCompanyId], references: [id])
  createdAt                 DateTime?          @db.Date
  name                      String?
  productdefault            String?
  campaignstatus            String?
  enablecuration            Boolean?
  enabletosendustolead      Boolean?
  enabled                   Boolean?
  isconversationia          Boolean?
  campaignnumberbusiness    String?            @unique
  whatsappprovider          String?
  enabletosendprovider      Boolean?
  enabletosecondcallprovider Boolean?
  integrationconfiguration  Json?
  integrationname           String?
  templatelistvars          Json[]
  metaconfiguration         Json?
  messageperruns            Json[]
  notifyconfiguration       Json?
  updatedAt                 DateTime?          @db.Date
  whitelabel_config         String
  whatleadCompanyId         String?
  leads                     Lead[]

  @@map("whatleadparceiroconfigs")
}

model Lead {
  id                        String             @id @default(uuid())
  externalid                String?
  sourceid                  String?
  name                      String
  phone                     String
  email                     String?
  lastmessagesent           DateTime?
  stepsecondcalltemplate    Int?
  stepnointeraction         Int?
  nointeractionquantity     Int?
  accepttemplate            Boolean?
  acceptsecondtemplate      Boolean?
  status                    String?
  dialog                    Json[]
  config                    CompaniesUnites    @relation(fields: [configid], references: [id])
  configid                  String
  whitelabelconfig          String
  lastintent                String?
  broker                    String?
  origin                    String?
  send                      Boolean?
  sendAt                    DateTime?
  isBusinessAutoResponder   Boolean?           @default(false)
  startmessage              DateTime?          @default(now())
  schedulingdata            String?
  productchoosebyclient     String?
  productid                 Int?
  createdat                 DateTime?          @default(now())
  updatedat                 DateTime?          @updatedAt
  curation                  Json?

  @@index([phone, configid])
  @@map("whatleadleads")
}

model Bot_Descritivo {
  id                        String             @id @default(uuid())
  name                      String
  descritivo                String
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt

  @@index([name, descritivo, createdAt(sort: Desc)])
  @@map("bot_descritivo")
}

model Payment {
  id                        String             @id @default(uuid())
  stripePaymentId           String             @unique
  amount                    Int
  currency                  String
  status                    String
  customerId                String?
  metadata                  Json?
  disputeStatus             String?
  disputeReason             String?
  cancelReason              String?
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  userId                    String?
  user                      User?              @relation(fields: [userId], references: [id])

  @@index([customerId])
  @@index([status])
  @@index([userId])
}

model Instance {
  id                        String             @id @default(uuid())
  instanceName              String             @unique
  connectionStatus          String             @default("pending")
  number                    String?
  ownerJid                  String?
  profilePicUrl             String?
  integration               String             @default("WHATSAPP-BAILEYS")
  token                     String?
  clientName                String?
  profileName               String?
  userId                    String
  user                      User               @relation(fields: [userId], references: [id])
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  disconnectedAt            DateTime?
  disconnectionObject       Json?
  disconnectionReasonCode   String?
  warmupStats               WarmupStats?
  proxyConfig               Json?
  typebot                   Json?
  mediaStats                MediaStats[]

  @@index([userId])
}

model MediaStats {
  id                        String             @id @default(uuid())
  instanceName              String
  instance                  Instance           @relation(fields: [instanceName], references: [instanceName])
  date                      DateTime           @default(now())
  text                      Int                @default(0)
  image                     Int                @default(0)
  video                     Int                @default(0)
  audio                     Int                @default(0)
  sticker                   Int                @default(0)
  reaction                  Int                @default(0)
  isReceived                Boolean            @default(false)
  totalDaily                Int                @default(0)
  totalAllTime              Int                @default(0)
  totalSent                 Int                @default(0)
  totalReceived             Int                @default(0)
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt

  warmupStatsSent           WarmupStats[]      @relation(name: "WarmupStatsToMediaStatsSent")
  warmupStatsReceived       WarmupStats[]      @relation(name: "WarmupStatsToMediaStatsReceived")

  @@index([instanceName])
  @@index([date])
}

model WarmupStats {
  id                        String             @id @default(uuid())
  instanceName              String             @unique
  status                    String             @default("paused")
  messagesSent              Int                @default(0)
  messagesReceived          Int                @default(0)
  mediaStats                MediaStats?        @relation(name: "WarmupStatsToMediaStatsSent", fields: [mediaStatsId], references: [id])
  mediaReceived             MediaStats?        @relation(name: "WarmupStatsToMediaStatsReceived", fields: [mediaReceivedId], references: [id])
  warmupTime                Int                @default(0)
  lastActive                DateTime           @default(now())
  startTime                 DateTime?
  pauseTime                 DateTime?
  progress                  Int                @default(0)
  userId                    String
  user                      User               @relation(fields: [userId], references: [id])
  instance                  Instance           @relation(fields: [instanceName], references: [instanceName])
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  mediaStatsId              String?
  mediaReceivedId           String?

  @@index([userId])
  @@index([instanceName])
}
