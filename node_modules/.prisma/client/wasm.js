
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.6.0
 * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
 */
Prisma.prismaVersion = {
  client: "6.6.0",
  engine: "f676762280b54cd07c770017ed3711ddde35f37a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  profile: 'profile',
  phone: 'phone',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  stripeSubscriptionStatus: 'stripeSubscriptionStatus',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  whatleadCompanyId: 'whatleadCompanyId',
  plan: 'plan',
  status: 'status',
  maxInstances: 'maxInstances',
  messagesPerDay: 'messagesPerDay',
  features: 'features',
  support: 'support',
  trialEndDate: 'trialEndDate',
  referredBy: 'referredBy',
  role: 'role'
};

exports.Prisma.CompaniesUnitesScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  name: 'name',
  productdefault: 'productdefault',
  campaignstatus: 'campaignstatus',
  enablecuration: 'enablecuration',
  enabletosendustolead: 'enabletosendustolead',
  enabled: 'enabled',
  isconversationia: 'isconversationia',
  campaignnumberbusiness: 'campaignnumberbusiness',
  whatsappprovider: 'whatsappprovider',
  enabletosendprovider: 'enabletosendprovider',
  enabletosecondcallprovider: 'enabletosecondcallprovider',
  integrationconfiguration: 'integrationconfiguration',
  integrationname: 'integrationname',
  templatelistvars: 'templatelistvars',
  metaconfiguration: 'metaconfiguration',
  messageperruns: 'messageperruns',
  notifyconfiguration: 'notifyconfiguration',
  updatedAt: 'updatedAt',
  whitelabel_config: 'whitelabel_config',
  whatleadCompanyId: 'whatleadCompanyId'
};

exports.Prisma.LeadScalarFieldEnum = {
  id: 'id',
  externalid: 'externalid',
  sourceid: 'sourceid',
  name: 'name',
  phone: 'phone',
  email: 'email',
  lastmessagesent: 'lastmessagesent',
  stepsecondcalltemplate: 'stepsecondcalltemplate',
  stepnointeraction: 'stepnointeraction',
  nointeractionquantity: 'nointeractionquantity',
  accepttemplate: 'accepttemplate',
  acceptsecondtemplate: 'acceptsecondtemplate',
  status: 'status',
  dialog: 'dialog',
  configid: 'configid',
  whitelabelconfig: 'whitelabelconfig',
  lastintent: 'lastintent',
  broker: 'broker',
  origin: 'origin',
  send: 'send',
  sendAt: 'sendAt',
  isBusinessAutoResponder: 'isBusinessAutoResponder',
  startmessage: 'startmessage',
  schedulingdata: 'schedulingdata',
  productchoosebyclient: 'productchoosebyclient',
  productid: 'productid',
  createdat: 'createdat',
  updatedat: 'updatedat',
  curation: 'curation'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  stripePaymentId: 'stripePaymentId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  dueDate: 'dueDate',
  customerId: 'customerId',
  metadata: 'metadata',
  disputeStatus: 'disputeStatus',
  disputeReason: 'disputeReason',
  cancelReason: 'cancelReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.InstanceScalarFieldEnum = {
  id: 'id',
  instanceName: 'instanceName',
  connectionStatus: 'connectionStatus',
  number: 'number',
  ownerJid: 'ownerJid',
  profilePicUrl: 'profilePicUrl',
  integration: 'integration',
  token: 'token',
  clientName: 'clientName',
  profileName: 'profileName',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  disconnectedAt: 'disconnectedAt',
  disconnectionObject: 'disconnectionObject',
  disconnectionReasonCode: 'disconnectionReasonCode',
  proxyConfig: 'proxyConfig',
  typebot: 'typebot'
};

exports.Prisma.MediaStatsScalarFieldEnum = {
  id: 'id',
  instanceName: 'instanceName',
  date: 'date',
  text: 'text',
  image: 'image',
  video: 'video',
  audio: 'audio',
  sticker: 'sticker',
  reaction: 'reaction',
  isReceived: 'isReceived',
  totalDaily: 'totalDaily',
  totalAllTime: 'totalAllTime',
  totalSent: 'totalSent',
  totalReceived: 'totalReceived',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WarmupStatsScalarFieldEnum = {
  id: 'id',
  instanceName: 'instanceName',
  status: 'status',
  messagesSent: 'messagesSent',
  messagesReceived: 'messagesReceived',
  warmupTime: 'warmupTime',
  lastActive: 'lastActive',
  startTime: 'startTime',
  pauseTime: 'pauseTime',
  progress: 'progress',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  mediaStatsId: 'mediaStatsId',
  mediaReceivedId: 'mediaReceivedId'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  type: 'type',
  message: 'message',
  mediaUrl: 'mediaUrl',
  mediaType: 'mediaType',
  mediaCaption: 'mediaCaption',
  scheduledDate: 'scheduledDate',
  scheduledStatus: 'scheduledStatus',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  pausedAt: 'pausedAt',
  progress: 'progress',
  minDelay: 'minDelay',
  maxDelay: 'maxDelay',
  userId: 'userId',
  instanceId: 'instanceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isAiResponder: 'isAiResponder'
};

exports.Prisma.CampaignDispatchScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  instanceName: 'instanceName',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CampaignMessageScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  type: 'type',
  content: 'content',
  order: 'order',
  caption: 'caption',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CampaignLeadScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  campaignId: 'campaignId',
  name: 'name',
  phone: 'phone',
  status: 'status',
  sentAt: 'sentAt',
  deliveredAt: 'deliveredAt',
  readAt: 'readAt',
  failedAt: 'failedAt',
  failureReason: 'failureReason',
  messageId: 'messageId',
  segment: 'segment',
  engagement: 'engagement',
  syncedWithCRM: 'syncedWithCRM',
  syncedAt: 'syncedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CampaignScheduleScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  instanceName: 'instanceName',
  scheduledDate: 'scheduledDate',
  status: 'status',
  message: 'message',
  mediaType: 'mediaType',
  mediaUrl: 'mediaUrl',
  mediaCaption: 'mediaCaption',
  minDelay: 'minDelay',
  maxDelay: 'maxDelay',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  startedAt: 'startedAt',
  completedAt: 'completedAt'
};

exports.Prisma.CampaignStatisticsScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  totalLeads: 'totalLeads',
  sentCount: 'sentCount',
  deliveredCount: 'deliveredCount',
  readCount: 'readCount',
  failedCount: 'failedCount',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageLogScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  campaignLeadId: 'campaignLeadId',
  leadId: 'leadId',
  messageId: 'messageId',
  messageDate: 'messageDate',
  messageType: 'messageType',
  content: 'content',
  status: 'status',
  statusHistory: 'statusHistory',
  sentAt: 'sentAt',
  deliveredAt: 'deliveredAt',
  readAt: 'readAt',
  failedAt: 'failedAt',
  failureReason: 'failureReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageAnalyticsScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  date: 'date',
  sentCount: 'sentCount',
  deliveredCount: 'deliveredCount',
  readCount: 'readCount',
  respondedCount: 'respondedCount',
  failedCount: 'failedCount'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  phone: 'phone',
  name: 'name',
  email: 'email',
  company: 'company',
  notes: 'notes',
  tags: 'tags',
  userId: 'userId',
  lastInteractionAt: 'lastInteractionAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  source: 'source'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  instanceName: 'instanceName',
  contactPhone: 'contactPhone',
  contactName: 'contactName',
  contactAvatar: 'contactAvatar',
  lastMessageAt: 'lastMessageAt',
  lastMessage: 'lastMessage',
  unreadCount: 'unreadCount',
  status: 'status',
  tags: 'tags',
  isActive: 'isActive',
  contactId: 'contactId',
  userId: 'userId',
  isGroup: 'isGroup',
  groupMetadata: 'groupMetadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  messageId: 'messageId',
  content: 'content',
  type: 'type',
  sender: 'sender',
  status: 'status',
  timestamp: 'timestamp',
  mediaUrl: 'mediaUrl',
  mediaType: 'mediaType',
  replyTo: 'replyTo',
  userId: 'userId',
  failureReason: 'failureReason',
  createdAt: 'createdAt'
};

exports.Prisma.MessageAttachmentScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  type: 'type',
  url: 'url',
  name: 'name',
  mimeType: 'mimeType',
  filename: 'filename',
  size: 'size',
  createdAt: 'createdAt'
};

exports.Prisma.CampaignErrorLogScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  errorMessage: 'errorMessage',
  errorDetails: 'errorDetails',
  createdAt: 'createdAt'
};

exports.Prisma.ContactNoteScalarFieldEnum = {
  id: 'id',
  contactId: 'contactId',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.MessageReactionScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  conversationId: 'conversationId',
  reaction: 'reaction',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.InstanceStatus = exports.$Enums.InstanceStatus = {
  OPEN: 'OPEN',
  CLOSED: 'CLOSED',
  CONNECTED: 'CONNECTED',
  DISCONNECTED: 'DISCONNECTED',
  CONNECTING: 'CONNECTING',
  OFFLINE: 'OFFLINE',
  ERROR: 'ERROR',
  RECEIVED: 'RECEIVED'
};

exports.MessageStatus = exports.$Enums.MessageStatus = {
  PENDING: 'PENDING',
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  READ: 'READ',
  FAILED: 'FAILED'
};

exports.Prisma.ModelName = {
  Company: 'Company',
  User: 'User',
  CompaniesUnites: 'CompaniesUnites',
  Lead: 'Lead',
  Payment: 'Payment',
  Instance: 'Instance',
  MediaStats: 'MediaStats',
  WarmupStats: 'WarmupStats',
  Campaign: 'Campaign',
  CampaignDispatch: 'CampaignDispatch',
  CampaignMessage: 'CampaignMessage',
  CampaignLead: 'CampaignLead',
  CampaignSchedule: 'CampaignSchedule',
  CampaignStatistics: 'CampaignStatistics',
  MessageLog: 'MessageLog',
  MessageAnalytics: 'MessageAnalytics',
  Contact: 'Contact',
  Conversation: 'Conversation',
  Message: 'Message',
  MessageAttachment: 'MessageAttachment',
  CampaignErrorLog: 'CampaignErrorLog',
  ContactNote: 'ContactNote',
  MessageReaction: 'MessageReaction'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
