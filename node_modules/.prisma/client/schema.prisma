generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                      String            @id @default(uuid())
  name                    String
  active                  Boolean?          @default(true)
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  WhatleadUser            User[]
  whatleadparceiroconfigs CompaniesUnites[]

  @@index([createdAt(sort: Desc)])
  @@map("whatlead_companies")
}

model User {
  id                       String        @id @default(uuid())
  email                    String        @unique
  name                     String
  password                 String
  profile                  String
  phone                    String
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  active                   Boolean?      @default(true)
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  whatleadCompanyId        String
  plan                     String        @default("free")
  status                   Boolean       @default(true)
  maxInstances             Int           @default(2)
  messagesPerDay           Int           @default(20)
  features                 String[]      @default([])
  support                  String        @default("basic")
  trialEndDate             DateTime?
  instances                Instance[]
  payments                 Payment[]
  warmupStats              WarmupStats[]
  Campaign                 Campaign[]
  company                  Company       @relation(fields: [whatleadCompanyId], references: [id])

  @@index([email, profile, phone, createdAt(sort: Desc)])
  @@map("whatlead_users")
}

model CompaniesUnites {
  id                         String    @id @default(uuid())
  createdAt                  DateTime? @db.Date
  name                       String?
  productdefault             String?
  campaignstatus             String?
  enablecuration             Boolean?
  enabletosendustolead       Boolean?
  enabled                    Boolean?
  isconversationia           Boolean?
  campaignnumberbusiness     String?   @unique
  whatsappprovider           String?
  enabletosendprovider       Boolean?
  enabletosecondcallprovider Boolean?
  integrationconfiguration   Json?
  integrationname            String?
  templatelistvars           Json[]
  metaconfiguration          Json?
  messageperruns             Json[]
  notifyconfiguration        Json?
  updatedAt                  DateTime? @db.Date
  whitelabel_config          String
  whatleadCompanyId          String?
  leads                      Lead[]
  company                    Company?  @relation(fields: [whatleadCompanyId], references: [id])

  @@map("whatleadparceiroconfigs")
}

model Lead {
  id                      String          @id @default(uuid())
  externalid              String?
  sourceid                String?
  name                    String
  phone                   String
  email                   String?
  lastmessagesent         DateTime?
  stepsecondcalltemplate  Int?
  stepnointeraction       Int?
  nointeractionquantity   Int?
  accepttemplate          Boolean?
  acceptsecondtemplate    Boolean?
  status                  String?
  dialog                  Json[]
  MessageLog              MessageLog[]
  configid                String
  whitelabelconfig        String
  lastintent              String?
  broker                  String?
  origin                  String?
  send                    Boolean?
  sendAt                  DateTime?
  isBusinessAutoResponder Boolean?        @default(false)
  startmessage            DateTime?       @default(now())
  schedulingdata          String?
  productchoosebyclient   String?
  productid               Int?
  createdat               DateTime?       @default(now())
  updatedat               DateTime?       @updatedAt
  curation                Json?
  config                  CompaniesUnites @relation(fields: [configid], references: [id])

  @@index([phone, configid])
  @@map("whatleadleads")
}

model Bot_Descritivo {
  id         String   @id @default(uuid())
  name       String
  descritivo String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([name, descritivo, createdAt(sort: Desc)])
  @@map("bot_descritivo")
}

model Payment {
  id              String   @id @default(uuid())
  stripePaymentId String   @unique
  amount          Int
  currency        String
  status          String
  customerId      String?
  metadata        Json?
  disputeStatus   String?
  disputeReason   String?
  cancelReason    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String?
  user            User?    @relation(fields: [userId], references: [id])

  @@index([customerId])
  @@index([status])
  @@index([userId])
}

model Instance {
  id                      String       @id @default(uuid())
  instanceName            String       @unique
  connectionStatus        String       @default("pending")
  number                  String?
  ownerJid                String?
  profilePicUrl           String?
  integration             String       @default("WHATSAPP-BAILEYS")
  token                   String?
  clientName              String?
  profileName             String?
  userId                  String
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  disconnectedAt          DateTime?
  disconnectionObject     Json?
  disconnectionReasonCode String?
  proxyConfig             Json?
  typebot                 Json?
  user                    User         @relation(fields: [userId], references: [id])
  mediaStats              MediaStats[]
  warmupStats             WarmupStats?
  Campaign                Campaign[]

  @@index([userId])
}

model MediaStats {
  id                  String        @id @default(uuid())
  instanceName        String
  date                DateTime      @default(now())
  text                Int           @default(0)
  image               Int           @default(0)
  video               Int           @default(0)
  audio               Int           @default(0)
  sticker             Int           @default(0)
  reaction            Int           @default(0)
  isReceived          Boolean       @default(false)
  totalDaily          Int           @default(0)
  totalAllTime        Int           @default(0)
  totalSent           Int           @default(0)
  totalReceived       Int           @default(0)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  instance            Instance      @relation(fields: [instanceName], references: [instanceName])
  warmupStatsReceived WarmupStats[] @relation("WarmupStatsToMediaStatsReceived")
  warmupStatsSent     WarmupStats[] @relation("WarmupStatsToMediaStatsSent")

  @@index([instanceName])
  @@index([date])
}

model WarmupStats {
  id               String      @id @default(uuid())
  instanceName     String      @unique
  status           String      @default("paused")
  messagesSent     Int         @default(0)
  messagesReceived Int         @default(0)
  warmupTime       Int         @default(0)
  lastActive       DateTime    @default(now())
  startTime        DateTime?
  pauseTime        DateTime?
  progress         Int         @default(0)
  userId           String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  mediaStatsId     String?
  mediaReceivedId  String?
  instance         Instance    @relation(fields: [instanceName], references: [instanceName])
  mediaReceived    MediaStats? @relation("WarmupStatsToMediaStatsReceived", fields: [mediaReceivedId], references: [id])
  mediaStats       MediaStats? @relation("WarmupStatsToMediaStatsSent", fields: [mediaStatsId], references: [id])
  user             User        @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([instanceName])
}

model Campaign {
  id              String              @id @default(uuid())
  name            String
  description     String?
  status          String              @default("draft")
  type            String
  scheduledDate   DateTime?
  scheduledStatus String?             @default("pending")
  startedAt       DateTime?
  completedAt     DateTime?
  pausedAt        DateTime?
  progress        Int                 @default(0)
  minDelay        Int                 @default(5)
  maxDelay        Int                 @default(30)
  userId          String
  instanceName    String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  MessageLog      MessageLog[]
  leads           CampaignLead[]
  messages        CampaignMessage[]
  statistics      CampaignStatistics?
  instance        Instance            @relation(fields: [instanceName], references: [instanceName])
  user            User                @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@map("whatlead_campaigns")
}

model CampaignMessage {
  id         String   @id @default(uuid())
  campaignId String
  type       String
  content    String
  order      Int
  caption    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
  @@map("whatlead_campaign_messages")
}

model CampaignLead {
  id            String       @id @default(uuid())
  campaignId    String
  name          String?
  phone         String
  status        String       @default("pending")
  sentAt        DateTime?
  deliveredAt   DateTime?
  readAt        DateTime?
  failedAt      DateTime?
  failureReason String?
  messageId     String?
  messageLogs   MessageLog[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  campaign      Campaign     @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
  @@index([phone])
  @@index([status])
  @@map("whatlead_campaign_leads")
}

model CampaignStatistics {
  id             String    @id @default(uuid())
  campaignId     String    @unique
  totalLeads     Int       @default(0)
  sentCount      Int       @default(0)
  deliveredCount Int       @default(0)
  readCount      Int       @default(0)
  failedCount    Int       @default(0)
  startedAt      DateTime?
  completedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  campaign       Campaign  @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
  @@map("whatlead_campaign_statistics")
}

model MessageLog {
  id            String         @id @default(uuid())
  campaignId    String
  campaign      Campaign       @relation(fields: [campaignId], references: [id])
  CampaignLead  CampaignLead[]
  leadId        String
  lead          Lead           @relation(fields: [leadId], references: [id])
  messageId     String
  messageDate   DateTime
  messageType   String
  content       String
  status        String
  statusHistory Json[]
  sentAt        DateTime?
  deliveredAt   DateTime?
  readAt        DateTime?
  failedAt      DateTime?
  failureReason String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([messageId, messageDate])
  @@index([campaignId, messageDate])
  @@index([leadId, messageDate])
  @@index([status])
}
