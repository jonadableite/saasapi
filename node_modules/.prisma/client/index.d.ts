
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Instance
 * 
 */
export type Instance = $Result.DefaultSelection<Prisma.$InstancePayload>
/**
 * Model MediaStats
 * 
 */
export type MediaStats = $Result.DefaultSelection<Prisma.$MediaStatsPayload>
/**
 * Model WarmupStats
 * 
 */
export type WarmupStats = $Result.DefaultSelection<Prisma.$WarmupStatsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.instance`: Exposes CRUD operations for the **Instance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Instances
    * const instances = await prisma.instance.findMany()
    * ```
    */
  get instance(): Prisma.InstanceDelegate<ExtArgs>;

  /**
   * `prisma.mediaStats`: Exposes CRUD operations for the **MediaStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MediaStats
    * const mediaStats = await prisma.mediaStats.findMany()
    * ```
    */
  get mediaStats(): Prisma.MediaStatsDelegate<ExtArgs>;

  /**
   * `prisma.warmupStats`: Exposes CRUD operations for the **WarmupStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WarmupStats
    * const warmupStats = await prisma.warmupStats.findMany()
    * ```
    */
  get warmupStats(): Prisma.WarmupStatsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.1.0
   * Query Engine version: 11f085a2012c0f4778414c8db2651556ee0ef959
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Instance: 'Instance',
    MediaStats: 'MediaStats',
    WarmupStats: 'WarmupStats'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "instance" | "mediaStats" | "warmupStats"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Instance: {
        payload: Prisma.$InstancePayload<ExtArgs>
        fields: Prisma.InstanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InstanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InstanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstancePayload>
          }
          findFirst: {
            args: Prisma.InstanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InstanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstancePayload>
          }
          findMany: {
            args: Prisma.InstanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstancePayload>[]
          }
          create: {
            args: Prisma.InstanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstancePayload>
          }
          createMany: {
            args: Prisma.InstanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InstanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstancePayload>[]
          }
          delete: {
            args: Prisma.InstanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstancePayload>
          }
          update: {
            args: Prisma.InstanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstancePayload>
          }
          deleteMany: {
            args: Prisma.InstanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InstanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InstanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstancePayload>
          }
          aggregate: {
            args: Prisma.InstanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInstance>
          }
          groupBy: {
            args: Prisma.InstanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<InstanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.InstanceCountArgs<ExtArgs>
            result: $Utils.Optional<InstanceCountAggregateOutputType> | number
          }
        }
      }
      MediaStats: {
        payload: Prisma.$MediaStatsPayload<ExtArgs>
        fields: Prisma.MediaStatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MediaStatsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MediaStatsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaStatsPayload>
          }
          findFirst: {
            args: Prisma.MediaStatsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MediaStatsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaStatsPayload>
          }
          findMany: {
            args: Prisma.MediaStatsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaStatsPayload>[]
          }
          create: {
            args: Prisma.MediaStatsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaStatsPayload>
          }
          createMany: {
            args: Prisma.MediaStatsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MediaStatsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaStatsPayload>[]
          }
          delete: {
            args: Prisma.MediaStatsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaStatsPayload>
          }
          update: {
            args: Prisma.MediaStatsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaStatsPayload>
          }
          deleteMany: {
            args: Prisma.MediaStatsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MediaStatsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MediaStatsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaStatsPayload>
          }
          aggregate: {
            args: Prisma.MediaStatsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMediaStats>
          }
          groupBy: {
            args: Prisma.MediaStatsGroupByArgs<ExtArgs>
            result: $Utils.Optional<MediaStatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.MediaStatsCountArgs<ExtArgs>
            result: $Utils.Optional<MediaStatsCountAggregateOutputType> | number
          }
        }
      }
      WarmupStats: {
        payload: Prisma.$WarmupStatsPayload<ExtArgs>
        fields: Prisma.WarmupStatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WarmupStatsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarmupStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WarmupStatsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarmupStatsPayload>
          }
          findFirst: {
            args: Prisma.WarmupStatsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarmupStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WarmupStatsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarmupStatsPayload>
          }
          findMany: {
            args: Prisma.WarmupStatsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarmupStatsPayload>[]
          }
          create: {
            args: Prisma.WarmupStatsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarmupStatsPayload>
          }
          createMany: {
            args: Prisma.WarmupStatsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WarmupStatsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarmupStatsPayload>[]
          }
          delete: {
            args: Prisma.WarmupStatsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarmupStatsPayload>
          }
          update: {
            args: Prisma.WarmupStatsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarmupStatsPayload>
          }
          deleteMany: {
            args: Prisma.WarmupStatsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WarmupStatsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WarmupStatsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarmupStatsPayload>
          }
          aggregate: {
            args: Prisma.WarmupStatsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWarmupStats>
          }
          groupBy: {
            args: Prisma.WarmupStatsGroupByArgs<ExtArgs>
            result: $Utils.Optional<WarmupStatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.WarmupStatsCountArgs<ExtArgs>
            result: $Utils.Optional<WarmupStatsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    instances: number
    warmupStats: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instances?: boolean | UserCountOutputTypeCountInstancesArgs
    warmupStats?: boolean | UserCountOutputTypeCountWarmupStatsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstanceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWarmupStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WarmupStatsWhereInput
  }


  /**
   * Count Type MediaStatsCountOutputType
   */

  export type MediaStatsCountOutputType = {
    warmupStatsSent: number
    warmupStatsReceived: number
  }

  export type MediaStatsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    warmupStatsSent?: boolean | MediaStatsCountOutputTypeCountWarmupStatsSentArgs
    warmupStatsReceived?: boolean | MediaStatsCountOutputTypeCountWarmupStatsReceivedArgs
  }

  // Custom InputTypes
  /**
   * MediaStatsCountOutputType without action
   */
  export type MediaStatsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaStatsCountOutputType
     */
    select?: MediaStatsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MediaStatsCountOutputType without action
   */
  export type MediaStatsCountOutputTypeCountWarmupStatsSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WarmupStatsWhereInput
  }

  /**
   * MediaStatsCountOutputType without action
   */
  export type MediaStatsCountOutputTypeCountWarmupStatsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WarmupStatsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    maxInstances: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    maxInstances: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    plan: string | null
    status: boolean | null
    maxInstances: number | null
    trialEndDate: Date | null
    stripeCustomerId: string | null
    stripeSubscriptionId: string | null
    stripeSubscriptionStatus: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    plan: string | null
    status: boolean | null
    maxInstances: number | null
    trialEndDate: Date | null
    stripeCustomerId: string | null
    stripeSubscriptionId: string | null
    stripeSubscriptionStatus: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    plan: number
    status: number
    maxInstances: number
    trialEndDate: number
    stripeCustomerId: number
    stripeSubscriptionId: number
    stripeSubscriptionStatus: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    maxInstances?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    maxInstances?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    plan?: true
    status?: true
    maxInstances?: true
    trialEndDate?: true
    stripeCustomerId?: true
    stripeSubscriptionId?: true
    stripeSubscriptionStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    plan?: true
    status?: true
    maxInstances?: true
    trialEndDate?: true
    stripeCustomerId?: true
    stripeSubscriptionId?: true
    stripeSubscriptionStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    plan?: true
    status?: true
    maxInstances?: true
    trialEndDate?: true
    stripeCustomerId?: true
    stripeSubscriptionId?: true
    stripeSubscriptionStatus?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    plan: string
    status: boolean
    maxInstances: number
    trialEndDate: Date | null
    stripeCustomerId: string | null
    stripeSubscriptionId: string | null
    stripeSubscriptionStatus: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    plan?: boolean
    status?: boolean
    maxInstances?: boolean
    trialEndDate?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    stripeSubscriptionStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    instances?: boolean | User$instancesArgs<ExtArgs>
    warmupStats?: boolean | User$warmupStatsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    plan?: boolean
    status?: boolean
    maxInstances?: boolean
    trialEndDate?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    stripeSubscriptionStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    plan?: boolean
    status?: boolean
    maxInstances?: boolean
    trialEndDate?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    stripeSubscriptionStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instances?: boolean | User$instancesArgs<ExtArgs>
    warmupStats?: boolean | User$warmupStatsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      instances: Prisma.$InstancePayload<ExtArgs>[]
      warmupStats: Prisma.$WarmupStatsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      plan: string
      status: boolean
      maxInstances: number
      trialEndDate: Date | null
      stripeCustomerId: string | null
      stripeSubscriptionId: string | null
      stripeSubscriptionStatus: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    instances<T extends User$instancesArgs<ExtArgs> = {}>(args?: Subset<T, User$instancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstancePayload<ExtArgs>, T, "findMany"> | Null>
    warmupStats<T extends User$warmupStatsArgs<ExtArgs> = {}>(args?: Subset<T, User$warmupStatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarmupStatsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly plan: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'Boolean'>
    readonly maxInstances: FieldRef<"User", 'Int'>
    readonly trialEndDate: FieldRef<"User", 'DateTime'>
    readonly stripeCustomerId: FieldRef<"User", 'String'>
    readonly stripeSubscriptionId: FieldRef<"User", 'String'>
    readonly stripeSubscriptionStatus: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.instances
   */
  export type User$instancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instance
     */
    select?: InstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstanceInclude<ExtArgs> | null
    where?: InstanceWhereInput
    orderBy?: InstanceOrderByWithRelationInput | InstanceOrderByWithRelationInput[]
    cursor?: InstanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InstanceScalarFieldEnum | InstanceScalarFieldEnum[]
  }

  /**
   * User.warmupStats
   */
  export type User$warmupStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarmupStats
     */
    select?: WarmupStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarmupStatsInclude<ExtArgs> | null
    where?: WarmupStatsWhereInput
    orderBy?: WarmupStatsOrderByWithRelationInput | WarmupStatsOrderByWithRelationInput[]
    cursor?: WarmupStatsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WarmupStatsScalarFieldEnum | WarmupStatsScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Instance
   */

  export type AggregateInstance = {
    _count: InstanceCountAggregateOutputType | null
    _avg: InstanceAvgAggregateOutputType | null
    _sum: InstanceSumAggregateOutputType | null
    _min: InstanceMinAggregateOutputType | null
    _max: InstanceMaxAggregateOutputType | null
  }

  export type InstanceAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type InstanceSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type InstanceMinAggregateOutputType = {
    id: number | null
    instanceName: string | null
    connectionStatus: string | null
    number: string | null
    ownerJid: string | null
    profilePicUrl: string | null
    integration: string | null
    token: string | null
    clientName: string | null
    profileName: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    disconnectedAt: Date | null
    disconnectionReasonCode: string | null
  }

  export type InstanceMaxAggregateOutputType = {
    id: number | null
    instanceName: string | null
    connectionStatus: string | null
    number: string | null
    ownerJid: string | null
    profilePicUrl: string | null
    integration: string | null
    token: string | null
    clientName: string | null
    profileName: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    disconnectedAt: Date | null
    disconnectionReasonCode: string | null
  }

  export type InstanceCountAggregateOutputType = {
    id: number
    instanceName: number
    connectionStatus: number
    number: number
    ownerJid: number
    profilePicUrl: number
    integration: number
    token: number
    clientName: number
    profileName: number
    userId: number
    createdAt: number
    updatedAt: number
    disconnectedAt: number
    disconnectionObject: number
    disconnectionReasonCode: number
    typebot: number
    _all: number
  }


  export type InstanceAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type InstanceSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type InstanceMinAggregateInputType = {
    id?: true
    instanceName?: true
    connectionStatus?: true
    number?: true
    ownerJid?: true
    profilePicUrl?: true
    integration?: true
    token?: true
    clientName?: true
    profileName?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    disconnectedAt?: true
    disconnectionReasonCode?: true
  }

  export type InstanceMaxAggregateInputType = {
    id?: true
    instanceName?: true
    connectionStatus?: true
    number?: true
    ownerJid?: true
    profilePicUrl?: true
    integration?: true
    token?: true
    clientName?: true
    profileName?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    disconnectedAt?: true
    disconnectionReasonCode?: true
  }

  export type InstanceCountAggregateInputType = {
    id?: true
    instanceName?: true
    connectionStatus?: true
    number?: true
    ownerJid?: true
    profilePicUrl?: true
    integration?: true
    token?: true
    clientName?: true
    profileName?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    disconnectedAt?: true
    disconnectionObject?: true
    disconnectionReasonCode?: true
    typebot?: true
    _all?: true
  }

  export type InstanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Instance to aggregate.
     */
    where?: InstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instances to fetch.
     */
    orderBy?: InstanceOrderByWithRelationInput | InstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Instances
    **/
    _count?: true | InstanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InstanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InstanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstanceMaxAggregateInputType
  }

  export type GetInstanceAggregateType<T extends InstanceAggregateArgs> = {
        [P in keyof T & keyof AggregateInstance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstance[P]>
      : GetScalarType<T[P], AggregateInstance[P]>
  }




  export type InstanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstanceWhereInput
    orderBy?: InstanceOrderByWithAggregationInput | InstanceOrderByWithAggregationInput[]
    by: InstanceScalarFieldEnum[] | InstanceScalarFieldEnum
    having?: InstanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstanceCountAggregateInputType | true
    _avg?: InstanceAvgAggregateInputType
    _sum?: InstanceSumAggregateInputType
    _min?: InstanceMinAggregateInputType
    _max?: InstanceMaxAggregateInputType
  }

  export type InstanceGroupByOutputType = {
    id: number
    instanceName: string
    connectionStatus: string
    number: string | null
    ownerJid: string | null
    profilePicUrl: string | null
    integration: string
    token: string | null
    clientName: string | null
    profileName: string | null
    userId: number
    createdAt: Date
    updatedAt: Date
    disconnectedAt: Date | null
    disconnectionObject: JsonValue | null
    disconnectionReasonCode: string | null
    typebot: JsonValue | null
    _count: InstanceCountAggregateOutputType | null
    _avg: InstanceAvgAggregateOutputType | null
    _sum: InstanceSumAggregateOutputType | null
    _min: InstanceMinAggregateOutputType | null
    _max: InstanceMaxAggregateOutputType | null
  }

  type GetInstanceGroupByPayload<T extends InstanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InstanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InstanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InstanceGroupByOutputType[P]>
            : GetScalarType<T[P], InstanceGroupByOutputType[P]>
        }
      >
    >


  export type InstanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instanceName?: boolean
    connectionStatus?: boolean
    number?: boolean
    ownerJid?: boolean
    profilePicUrl?: boolean
    integration?: boolean
    token?: boolean
    clientName?: boolean
    profileName?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    disconnectedAt?: boolean
    disconnectionObject?: boolean
    disconnectionReasonCode?: boolean
    typebot?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    warmupStats?: boolean | Instance$warmupStatsArgs<ExtArgs>
  }, ExtArgs["result"]["instance"]>

  export type InstanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instanceName?: boolean
    connectionStatus?: boolean
    number?: boolean
    ownerJid?: boolean
    profilePicUrl?: boolean
    integration?: boolean
    token?: boolean
    clientName?: boolean
    profileName?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    disconnectedAt?: boolean
    disconnectionObject?: boolean
    disconnectionReasonCode?: boolean
    typebot?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["instance"]>

  export type InstanceSelectScalar = {
    id?: boolean
    instanceName?: boolean
    connectionStatus?: boolean
    number?: boolean
    ownerJid?: boolean
    profilePicUrl?: boolean
    integration?: boolean
    token?: boolean
    clientName?: boolean
    profileName?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    disconnectedAt?: boolean
    disconnectionObject?: boolean
    disconnectionReasonCode?: boolean
    typebot?: boolean
  }

  export type InstanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    warmupStats?: boolean | Instance$warmupStatsArgs<ExtArgs>
  }
  export type InstanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InstancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Instance"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      warmupStats: Prisma.$WarmupStatsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      instanceName: string
      connectionStatus: string
      number: string | null
      ownerJid: string | null
      profilePicUrl: string | null
      integration: string
      token: string | null
      clientName: string | null
      profileName: string | null
      userId: number
      createdAt: Date
      updatedAt: Date
      disconnectedAt: Date | null
      disconnectionObject: Prisma.JsonValue | null
      disconnectionReasonCode: string | null
      typebot: Prisma.JsonValue | null
    }, ExtArgs["result"]["instance"]>
    composites: {}
  }

  type InstanceGetPayload<S extends boolean | null | undefined | InstanceDefaultArgs> = $Result.GetResult<Prisma.$InstancePayload, S>

  type InstanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InstanceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InstanceCountAggregateInputType | true
    }

  export interface InstanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Instance'], meta: { name: 'Instance' } }
    /**
     * Find zero or one Instance that matches the filter.
     * @param {InstanceFindUniqueArgs} args - Arguments to find a Instance
     * @example
     * // Get one Instance
     * const instance = await prisma.instance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InstanceFindUniqueArgs>(args: SelectSubset<T, InstanceFindUniqueArgs<ExtArgs>>): Prisma__InstanceClient<$Result.GetResult<Prisma.$InstancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Instance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InstanceFindUniqueOrThrowArgs} args - Arguments to find a Instance
     * @example
     * // Get one Instance
     * const instance = await prisma.instance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InstanceFindUniqueOrThrowArgs>(args: SelectSubset<T, InstanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InstanceClient<$Result.GetResult<Prisma.$InstancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Instance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstanceFindFirstArgs} args - Arguments to find a Instance
     * @example
     * // Get one Instance
     * const instance = await prisma.instance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InstanceFindFirstArgs>(args?: SelectSubset<T, InstanceFindFirstArgs<ExtArgs>>): Prisma__InstanceClient<$Result.GetResult<Prisma.$InstancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Instance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstanceFindFirstOrThrowArgs} args - Arguments to find a Instance
     * @example
     * // Get one Instance
     * const instance = await prisma.instance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InstanceFindFirstOrThrowArgs>(args?: SelectSubset<T, InstanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__InstanceClient<$Result.GetResult<Prisma.$InstancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Instances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Instances
     * const instances = await prisma.instance.findMany()
     * 
     * // Get first 10 Instances
     * const instances = await prisma.instance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const instanceWithIdOnly = await prisma.instance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InstanceFindManyArgs>(args?: SelectSubset<T, InstanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Instance.
     * @param {InstanceCreateArgs} args - Arguments to create a Instance.
     * @example
     * // Create one Instance
     * const Instance = await prisma.instance.create({
     *   data: {
     *     // ... data to create a Instance
     *   }
     * })
     * 
     */
    create<T extends InstanceCreateArgs>(args: SelectSubset<T, InstanceCreateArgs<ExtArgs>>): Prisma__InstanceClient<$Result.GetResult<Prisma.$InstancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Instances.
     * @param {InstanceCreateManyArgs} args - Arguments to create many Instances.
     * @example
     * // Create many Instances
     * const instance = await prisma.instance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InstanceCreateManyArgs>(args?: SelectSubset<T, InstanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Instances and returns the data saved in the database.
     * @param {InstanceCreateManyAndReturnArgs} args - Arguments to create many Instances.
     * @example
     * // Create many Instances
     * const instance = await prisma.instance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Instances and only return the `id`
     * const instanceWithIdOnly = await prisma.instance.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InstanceCreateManyAndReturnArgs>(args?: SelectSubset<T, InstanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstancePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Instance.
     * @param {InstanceDeleteArgs} args - Arguments to delete one Instance.
     * @example
     * // Delete one Instance
     * const Instance = await prisma.instance.delete({
     *   where: {
     *     // ... filter to delete one Instance
     *   }
     * })
     * 
     */
    delete<T extends InstanceDeleteArgs>(args: SelectSubset<T, InstanceDeleteArgs<ExtArgs>>): Prisma__InstanceClient<$Result.GetResult<Prisma.$InstancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Instance.
     * @param {InstanceUpdateArgs} args - Arguments to update one Instance.
     * @example
     * // Update one Instance
     * const instance = await prisma.instance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InstanceUpdateArgs>(args: SelectSubset<T, InstanceUpdateArgs<ExtArgs>>): Prisma__InstanceClient<$Result.GetResult<Prisma.$InstancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Instances.
     * @param {InstanceDeleteManyArgs} args - Arguments to filter Instances to delete.
     * @example
     * // Delete a few Instances
     * const { count } = await prisma.instance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InstanceDeleteManyArgs>(args?: SelectSubset<T, InstanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Instances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Instances
     * const instance = await prisma.instance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InstanceUpdateManyArgs>(args: SelectSubset<T, InstanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Instance.
     * @param {InstanceUpsertArgs} args - Arguments to update or create a Instance.
     * @example
     * // Update or create a Instance
     * const instance = await prisma.instance.upsert({
     *   create: {
     *     // ... data to create a Instance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Instance we want to update
     *   }
     * })
     */
    upsert<T extends InstanceUpsertArgs>(args: SelectSubset<T, InstanceUpsertArgs<ExtArgs>>): Prisma__InstanceClient<$Result.GetResult<Prisma.$InstancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Instances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstanceCountArgs} args - Arguments to filter Instances to count.
     * @example
     * // Count the number of Instances
     * const count = await prisma.instance.count({
     *   where: {
     *     // ... the filter for the Instances we want to count
     *   }
     * })
    **/
    count<T extends InstanceCountArgs>(
      args?: Subset<T, InstanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Instance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstanceAggregateArgs>(args: Subset<T, InstanceAggregateArgs>): Prisma.PrismaPromise<GetInstanceAggregateType<T>>

    /**
     * Group by Instance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstanceGroupByArgs['orderBy'] }
        : { orderBy?: InstanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Instance model
   */
  readonly fields: InstanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Instance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InstanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    warmupStats<T extends Instance$warmupStatsArgs<ExtArgs> = {}>(args?: Subset<T, Instance$warmupStatsArgs<ExtArgs>>): Prisma__WarmupStatsClient<$Result.GetResult<Prisma.$WarmupStatsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Instance model
   */ 
  interface InstanceFieldRefs {
    readonly id: FieldRef<"Instance", 'Int'>
    readonly instanceName: FieldRef<"Instance", 'String'>
    readonly connectionStatus: FieldRef<"Instance", 'String'>
    readonly number: FieldRef<"Instance", 'String'>
    readonly ownerJid: FieldRef<"Instance", 'String'>
    readonly profilePicUrl: FieldRef<"Instance", 'String'>
    readonly integration: FieldRef<"Instance", 'String'>
    readonly token: FieldRef<"Instance", 'String'>
    readonly clientName: FieldRef<"Instance", 'String'>
    readonly profileName: FieldRef<"Instance", 'String'>
    readonly userId: FieldRef<"Instance", 'Int'>
    readonly createdAt: FieldRef<"Instance", 'DateTime'>
    readonly updatedAt: FieldRef<"Instance", 'DateTime'>
    readonly disconnectedAt: FieldRef<"Instance", 'DateTime'>
    readonly disconnectionObject: FieldRef<"Instance", 'Json'>
    readonly disconnectionReasonCode: FieldRef<"Instance", 'String'>
    readonly typebot: FieldRef<"Instance", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Instance findUnique
   */
  export type InstanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instance
     */
    select?: InstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstanceInclude<ExtArgs> | null
    /**
     * Filter, which Instance to fetch.
     */
    where: InstanceWhereUniqueInput
  }

  /**
   * Instance findUniqueOrThrow
   */
  export type InstanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instance
     */
    select?: InstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstanceInclude<ExtArgs> | null
    /**
     * Filter, which Instance to fetch.
     */
    where: InstanceWhereUniqueInput
  }

  /**
   * Instance findFirst
   */
  export type InstanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instance
     */
    select?: InstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstanceInclude<ExtArgs> | null
    /**
     * Filter, which Instance to fetch.
     */
    where?: InstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instances to fetch.
     */
    orderBy?: InstanceOrderByWithRelationInput | InstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Instances.
     */
    cursor?: InstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Instances.
     */
    distinct?: InstanceScalarFieldEnum | InstanceScalarFieldEnum[]
  }

  /**
   * Instance findFirstOrThrow
   */
  export type InstanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instance
     */
    select?: InstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstanceInclude<ExtArgs> | null
    /**
     * Filter, which Instance to fetch.
     */
    where?: InstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instances to fetch.
     */
    orderBy?: InstanceOrderByWithRelationInput | InstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Instances.
     */
    cursor?: InstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Instances.
     */
    distinct?: InstanceScalarFieldEnum | InstanceScalarFieldEnum[]
  }

  /**
   * Instance findMany
   */
  export type InstanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instance
     */
    select?: InstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstanceInclude<ExtArgs> | null
    /**
     * Filter, which Instances to fetch.
     */
    where?: InstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instances to fetch.
     */
    orderBy?: InstanceOrderByWithRelationInput | InstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Instances.
     */
    cursor?: InstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instances.
     */
    skip?: number
    distinct?: InstanceScalarFieldEnum | InstanceScalarFieldEnum[]
  }

  /**
   * Instance create
   */
  export type InstanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instance
     */
    select?: InstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstanceInclude<ExtArgs> | null
    /**
     * The data needed to create a Instance.
     */
    data: XOR<InstanceCreateInput, InstanceUncheckedCreateInput>
  }

  /**
   * Instance createMany
   */
  export type InstanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Instances.
     */
    data: InstanceCreateManyInput | InstanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Instance createManyAndReturn
   */
  export type InstanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instance
     */
    select?: InstanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Instances.
     */
    data: InstanceCreateManyInput | InstanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Instance update
   */
  export type InstanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instance
     */
    select?: InstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstanceInclude<ExtArgs> | null
    /**
     * The data needed to update a Instance.
     */
    data: XOR<InstanceUpdateInput, InstanceUncheckedUpdateInput>
    /**
     * Choose, which Instance to update.
     */
    where: InstanceWhereUniqueInput
  }

  /**
   * Instance updateMany
   */
  export type InstanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Instances.
     */
    data: XOR<InstanceUpdateManyMutationInput, InstanceUncheckedUpdateManyInput>
    /**
     * Filter which Instances to update
     */
    where?: InstanceWhereInput
  }

  /**
   * Instance upsert
   */
  export type InstanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instance
     */
    select?: InstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstanceInclude<ExtArgs> | null
    /**
     * The filter to search for the Instance to update in case it exists.
     */
    where: InstanceWhereUniqueInput
    /**
     * In case the Instance found by the `where` argument doesn't exist, create a new Instance with this data.
     */
    create: XOR<InstanceCreateInput, InstanceUncheckedCreateInput>
    /**
     * In case the Instance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InstanceUpdateInput, InstanceUncheckedUpdateInput>
  }

  /**
   * Instance delete
   */
  export type InstanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instance
     */
    select?: InstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstanceInclude<ExtArgs> | null
    /**
     * Filter which Instance to delete.
     */
    where: InstanceWhereUniqueInput
  }

  /**
   * Instance deleteMany
   */
  export type InstanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Instances to delete
     */
    where?: InstanceWhereInput
  }

  /**
   * Instance.warmupStats
   */
  export type Instance$warmupStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarmupStats
     */
    select?: WarmupStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarmupStatsInclude<ExtArgs> | null
    where?: WarmupStatsWhereInput
  }

  /**
   * Instance without action
   */
  export type InstanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instance
     */
    select?: InstanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstanceInclude<ExtArgs> | null
  }


  /**
   * Model MediaStats
   */

  export type AggregateMediaStats = {
    _count: MediaStatsCountAggregateOutputType | null
    _avg: MediaStatsAvgAggregateOutputType | null
    _sum: MediaStatsSumAggregateOutputType | null
    _min: MediaStatsMinAggregateOutputType | null
    _max: MediaStatsMaxAggregateOutputType | null
  }

  export type MediaStatsAvgAggregateOutputType = {
    id: number | null
    text: number | null
    image: number | null
    video: number | null
    audio: number | null
    sticker: number | null
    reaction: number | null
    totalDaily: number | null
    totalAllTime: number | null
    totalSent: number | null
    totalReceived: number | null
  }

  export type MediaStatsSumAggregateOutputType = {
    id: number | null
    text: number | null
    image: number | null
    video: number | null
    audio: number | null
    sticker: number | null
    reaction: number | null
    totalDaily: number | null
    totalAllTime: number | null
    totalSent: number | null
    totalReceived: number | null
  }

  export type MediaStatsMinAggregateOutputType = {
    id: number | null
    instanceName: string | null
    date: Date | null
    text: number | null
    image: number | null
    video: number | null
    audio: number | null
    sticker: number | null
    reaction: number | null
    isReceived: boolean | null
    totalDaily: number | null
    totalAllTime: number | null
    totalSent: number | null
    totalReceived: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MediaStatsMaxAggregateOutputType = {
    id: number | null
    instanceName: string | null
    date: Date | null
    text: number | null
    image: number | null
    video: number | null
    audio: number | null
    sticker: number | null
    reaction: number | null
    isReceived: boolean | null
    totalDaily: number | null
    totalAllTime: number | null
    totalSent: number | null
    totalReceived: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MediaStatsCountAggregateOutputType = {
    id: number
    instanceName: number
    date: number
    text: number
    image: number
    video: number
    audio: number
    sticker: number
    reaction: number
    isReceived: number
    totalDaily: number
    totalAllTime: number
    totalSent: number
    totalReceived: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MediaStatsAvgAggregateInputType = {
    id?: true
    text?: true
    image?: true
    video?: true
    audio?: true
    sticker?: true
    reaction?: true
    totalDaily?: true
    totalAllTime?: true
    totalSent?: true
    totalReceived?: true
  }

  export type MediaStatsSumAggregateInputType = {
    id?: true
    text?: true
    image?: true
    video?: true
    audio?: true
    sticker?: true
    reaction?: true
    totalDaily?: true
    totalAllTime?: true
    totalSent?: true
    totalReceived?: true
  }

  export type MediaStatsMinAggregateInputType = {
    id?: true
    instanceName?: true
    date?: true
    text?: true
    image?: true
    video?: true
    audio?: true
    sticker?: true
    reaction?: true
    isReceived?: true
    totalDaily?: true
    totalAllTime?: true
    totalSent?: true
    totalReceived?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MediaStatsMaxAggregateInputType = {
    id?: true
    instanceName?: true
    date?: true
    text?: true
    image?: true
    video?: true
    audio?: true
    sticker?: true
    reaction?: true
    isReceived?: true
    totalDaily?: true
    totalAllTime?: true
    totalSent?: true
    totalReceived?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MediaStatsCountAggregateInputType = {
    id?: true
    instanceName?: true
    date?: true
    text?: true
    image?: true
    video?: true
    audio?: true
    sticker?: true
    reaction?: true
    isReceived?: true
    totalDaily?: true
    totalAllTime?: true
    totalSent?: true
    totalReceived?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MediaStatsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MediaStats to aggregate.
     */
    where?: MediaStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaStats to fetch.
     */
    orderBy?: MediaStatsOrderByWithRelationInput | MediaStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MediaStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MediaStats
    **/
    _count?: true | MediaStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MediaStatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MediaStatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MediaStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MediaStatsMaxAggregateInputType
  }

  export type GetMediaStatsAggregateType<T extends MediaStatsAggregateArgs> = {
        [P in keyof T & keyof AggregateMediaStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMediaStats[P]>
      : GetScalarType<T[P], AggregateMediaStats[P]>
  }




  export type MediaStatsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaStatsWhereInput
    orderBy?: MediaStatsOrderByWithAggregationInput | MediaStatsOrderByWithAggregationInput[]
    by: MediaStatsScalarFieldEnum[] | MediaStatsScalarFieldEnum
    having?: MediaStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MediaStatsCountAggregateInputType | true
    _avg?: MediaStatsAvgAggregateInputType
    _sum?: MediaStatsSumAggregateInputType
    _min?: MediaStatsMinAggregateInputType
    _max?: MediaStatsMaxAggregateInputType
  }

  export type MediaStatsGroupByOutputType = {
    id: number
    instanceName: string
    date: Date
    text: number
    image: number
    video: number
    audio: number
    sticker: number
    reaction: number
    isReceived: boolean
    totalDaily: number
    totalAllTime: number
    totalSent: number
    totalReceived: number
    createdAt: Date
    updatedAt: Date
    _count: MediaStatsCountAggregateOutputType | null
    _avg: MediaStatsAvgAggregateOutputType | null
    _sum: MediaStatsSumAggregateOutputType | null
    _min: MediaStatsMinAggregateOutputType | null
    _max: MediaStatsMaxAggregateOutputType | null
  }

  type GetMediaStatsGroupByPayload<T extends MediaStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MediaStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MediaStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MediaStatsGroupByOutputType[P]>
            : GetScalarType<T[P], MediaStatsGroupByOutputType[P]>
        }
      >
    >


  export type MediaStatsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instanceName?: boolean
    date?: boolean
    text?: boolean
    image?: boolean
    video?: boolean
    audio?: boolean
    sticker?: boolean
    reaction?: boolean
    isReceived?: boolean
    totalDaily?: boolean
    totalAllTime?: boolean
    totalSent?: boolean
    totalReceived?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    warmupStatsSent?: boolean | MediaStats$warmupStatsSentArgs<ExtArgs>
    warmupStatsReceived?: boolean | MediaStats$warmupStatsReceivedArgs<ExtArgs>
    _count?: boolean | MediaStatsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mediaStats"]>

  export type MediaStatsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instanceName?: boolean
    date?: boolean
    text?: boolean
    image?: boolean
    video?: boolean
    audio?: boolean
    sticker?: boolean
    reaction?: boolean
    isReceived?: boolean
    totalDaily?: boolean
    totalAllTime?: boolean
    totalSent?: boolean
    totalReceived?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["mediaStats"]>

  export type MediaStatsSelectScalar = {
    id?: boolean
    instanceName?: boolean
    date?: boolean
    text?: boolean
    image?: boolean
    video?: boolean
    audio?: boolean
    sticker?: boolean
    reaction?: boolean
    isReceived?: boolean
    totalDaily?: boolean
    totalAllTime?: boolean
    totalSent?: boolean
    totalReceived?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MediaStatsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    warmupStatsSent?: boolean | MediaStats$warmupStatsSentArgs<ExtArgs>
    warmupStatsReceived?: boolean | MediaStats$warmupStatsReceivedArgs<ExtArgs>
    _count?: boolean | MediaStatsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MediaStatsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MediaStatsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MediaStats"
    objects: {
      warmupStatsSent: Prisma.$WarmupStatsPayload<ExtArgs>[]
      warmupStatsReceived: Prisma.$WarmupStatsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      instanceName: string
      date: Date
      text: number
      image: number
      video: number
      audio: number
      sticker: number
      reaction: number
      isReceived: boolean
      totalDaily: number
      totalAllTime: number
      totalSent: number
      totalReceived: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["mediaStats"]>
    composites: {}
  }

  type MediaStatsGetPayload<S extends boolean | null | undefined | MediaStatsDefaultArgs> = $Result.GetResult<Prisma.$MediaStatsPayload, S>

  type MediaStatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MediaStatsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MediaStatsCountAggregateInputType | true
    }

  export interface MediaStatsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MediaStats'], meta: { name: 'MediaStats' } }
    /**
     * Find zero or one MediaStats that matches the filter.
     * @param {MediaStatsFindUniqueArgs} args - Arguments to find a MediaStats
     * @example
     * // Get one MediaStats
     * const mediaStats = await prisma.mediaStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MediaStatsFindUniqueArgs>(args: SelectSubset<T, MediaStatsFindUniqueArgs<ExtArgs>>): Prisma__MediaStatsClient<$Result.GetResult<Prisma.$MediaStatsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MediaStats that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MediaStatsFindUniqueOrThrowArgs} args - Arguments to find a MediaStats
     * @example
     * // Get one MediaStats
     * const mediaStats = await prisma.mediaStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MediaStatsFindUniqueOrThrowArgs>(args: SelectSubset<T, MediaStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MediaStatsClient<$Result.GetResult<Prisma.$MediaStatsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MediaStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaStatsFindFirstArgs} args - Arguments to find a MediaStats
     * @example
     * // Get one MediaStats
     * const mediaStats = await prisma.mediaStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MediaStatsFindFirstArgs>(args?: SelectSubset<T, MediaStatsFindFirstArgs<ExtArgs>>): Prisma__MediaStatsClient<$Result.GetResult<Prisma.$MediaStatsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MediaStats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaStatsFindFirstOrThrowArgs} args - Arguments to find a MediaStats
     * @example
     * // Get one MediaStats
     * const mediaStats = await prisma.mediaStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MediaStatsFindFirstOrThrowArgs>(args?: SelectSubset<T, MediaStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma__MediaStatsClient<$Result.GetResult<Prisma.$MediaStatsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MediaStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaStatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MediaStats
     * const mediaStats = await prisma.mediaStats.findMany()
     * 
     * // Get first 10 MediaStats
     * const mediaStats = await prisma.mediaStats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mediaStatsWithIdOnly = await prisma.mediaStats.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MediaStatsFindManyArgs>(args?: SelectSubset<T, MediaStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaStatsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MediaStats.
     * @param {MediaStatsCreateArgs} args - Arguments to create a MediaStats.
     * @example
     * // Create one MediaStats
     * const MediaStats = await prisma.mediaStats.create({
     *   data: {
     *     // ... data to create a MediaStats
     *   }
     * })
     * 
     */
    create<T extends MediaStatsCreateArgs>(args: SelectSubset<T, MediaStatsCreateArgs<ExtArgs>>): Prisma__MediaStatsClient<$Result.GetResult<Prisma.$MediaStatsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MediaStats.
     * @param {MediaStatsCreateManyArgs} args - Arguments to create many MediaStats.
     * @example
     * // Create many MediaStats
     * const mediaStats = await prisma.mediaStats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MediaStatsCreateManyArgs>(args?: SelectSubset<T, MediaStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MediaStats and returns the data saved in the database.
     * @param {MediaStatsCreateManyAndReturnArgs} args - Arguments to create many MediaStats.
     * @example
     * // Create many MediaStats
     * const mediaStats = await prisma.mediaStats.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MediaStats and only return the `id`
     * const mediaStatsWithIdOnly = await prisma.mediaStats.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MediaStatsCreateManyAndReturnArgs>(args?: SelectSubset<T, MediaStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaStatsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MediaStats.
     * @param {MediaStatsDeleteArgs} args - Arguments to delete one MediaStats.
     * @example
     * // Delete one MediaStats
     * const MediaStats = await prisma.mediaStats.delete({
     *   where: {
     *     // ... filter to delete one MediaStats
     *   }
     * })
     * 
     */
    delete<T extends MediaStatsDeleteArgs>(args: SelectSubset<T, MediaStatsDeleteArgs<ExtArgs>>): Prisma__MediaStatsClient<$Result.GetResult<Prisma.$MediaStatsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MediaStats.
     * @param {MediaStatsUpdateArgs} args - Arguments to update one MediaStats.
     * @example
     * // Update one MediaStats
     * const mediaStats = await prisma.mediaStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MediaStatsUpdateArgs>(args: SelectSubset<T, MediaStatsUpdateArgs<ExtArgs>>): Prisma__MediaStatsClient<$Result.GetResult<Prisma.$MediaStatsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MediaStats.
     * @param {MediaStatsDeleteManyArgs} args - Arguments to filter MediaStats to delete.
     * @example
     * // Delete a few MediaStats
     * const { count } = await prisma.mediaStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MediaStatsDeleteManyArgs>(args?: SelectSubset<T, MediaStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MediaStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MediaStats
     * const mediaStats = await prisma.mediaStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MediaStatsUpdateManyArgs>(args: SelectSubset<T, MediaStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MediaStats.
     * @param {MediaStatsUpsertArgs} args - Arguments to update or create a MediaStats.
     * @example
     * // Update or create a MediaStats
     * const mediaStats = await prisma.mediaStats.upsert({
     *   create: {
     *     // ... data to create a MediaStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MediaStats we want to update
     *   }
     * })
     */
    upsert<T extends MediaStatsUpsertArgs>(args: SelectSubset<T, MediaStatsUpsertArgs<ExtArgs>>): Prisma__MediaStatsClient<$Result.GetResult<Prisma.$MediaStatsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MediaStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaStatsCountArgs} args - Arguments to filter MediaStats to count.
     * @example
     * // Count the number of MediaStats
     * const count = await prisma.mediaStats.count({
     *   where: {
     *     // ... the filter for the MediaStats we want to count
     *   }
     * })
    **/
    count<T extends MediaStatsCountArgs>(
      args?: Subset<T, MediaStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MediaStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MediaStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MediaStatsAggregateArgs>(args: Subset<T, MediaStatsAggregateArgs>): Prisma.PrismaPromise<GetMediaStatsAggregateType<T>>

    /**
     * Group by MediaStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MediaStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MediaStatsGroupByArgs['orderBy'] }
        : { orderBy?: MediaStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MediaStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MediaStats model
   */
  readonly fields: MediaStatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MediaStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MediaStatsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    warmupStatsSent<T extends MediaStats$warmupStatsSentArgs<ExtArgs> = {}>(args?: Subset<T, MediaStats$warmupStatsSentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarmupStatsPayload<ExtArgs>, T, "findMany"> | Null>
    warmupStatsReceived<T extends MediaStats$warmupStatsReceivedArgs<ExtArgs> = {}>(args?: Subset<T, MediaStats$warmupStatsReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarmupStatsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MediaStats model
   */ 
  interface MediaStatsFieldRefs {
    readonly id: FieldRef<"MediaStats", 'Int'>
    readonly instanceName: FieldRef<"MediaStats", 'String'>
    readonly date: FieldRef<"MediaStats", 'DateTime'>
    readonly text: FieldRef<"MediaStats", 'Int'>
    readonly image: FieldRef<"MediaStats", 'Int'>
    readonly video: FieldRef<"MediaStats", 'Int'>
    readonly audio: FieldRef<"MediaStats", 'Int'>
    readonly sticker: FieldRef<"MediaStats", 'Int'>
    readonly reaction: FieldRef<"MediaStats", 'Int'>
    readonly isReceived: FieldRef<"MediaStats", 'Boolean'>
    readonly totalDaily: FieldRef<"MediaStats", 'Int'>
    readonly totalAllTime: FieldRef<"MediaStats", 'Int'>
    readonly totalSent: FieldRef<"MediaStats", 'Int'>
    readonly totalReceived: FieldRef<"MediaStats", 'Int'>
    readonly createdAt: FieldRef<"MediaStats", 'DateTime'>
    readonly updatedAt: FieldRef<"MediaStats", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MediaStats findUnique
   */
  export type MediaStatsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaStats
     */
    select?: MediaStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaStatsInclude<ExtArgs> | null
    /**
     * Filter, which MediaStats to fetch.
     */
    where: MediaStatsWhereUniqueInput
  }

  /**
   * MediaStats findUniqueOrThrow
   */
  export type MediaStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaStats
     */
    select?: MediaStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaStatsInclude<ExtArgs> | null
    /**
     * Filter, which MediaStats to fetch.
     */
    where: MediaStatsWhereUniqueInput
  }

  /**
   * MediaStats findFirst
   */
  export type MediaStatsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaStats
     */
    select?: MediaStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaStatsInclude<ExtArgs> | null
    /**
     * Filter, which MediaStats to fetch.
     */
    where?: MediaStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaStats to fetch.
     */
    orderBy?: MediaStatsOrderByWithRelationInput | MediaStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MediaStats.
     */
    cursor?: MediaStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MediaStats.
     */
    distinct?: MediaStatsScalarFieldEnum | MediaStatsScalarFieldEnum[]
  }

  /**
   * MediaStats findFirstOrThrow
   */
  export type MediaStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaStats
     */
    select?: MediaStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaStatsInclude<ExtArgs> | null
    /**
     * Filter, which MediaStats to fetch.
     */
    where?: MediaStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaStats to fetch.
     */
    orderBy?: MediaStatsOrderByWithRelationInput | MediaStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MediaStats.
     */
    cursor?: MediaStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MediaStats.
     */
    distinct?: MediaStatsScalarFieldEnum | MediaStatsScalarFieldEnum[]
  }

  /**
   * MediaStats findMany
   */
  export type MediaStatsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaStats
     */
    select?: MediaStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaStatsInclude<ExtArgs> | null
    /**
     * Filter, which MediaStats to fetch.
     */
    where?: MediaStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaStats to fetch.
     */
    orderBy?: MediaStatsOrderByWithRelationInput | MediaStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MediaStats.
     */
    cursor?: MediaStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaStats.
     */
    skip?: number
    distinct?: MediaStatsScalarFieldEnum | MediaStatsScalarFieldEnum[]
  }

  /**
   * MediaStats create
   */
  export type MediaStatsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaStats
     */
    select?: MediaStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaStatsInclude<ExtArgs> | null
    /**
     * The data needed to create a MediaStats.
     */
    data: XOR<MediaStatsCreateInput, MediaStatsUncheckedCreateInput>
  }

  /**
   * MediaStats createMany
   */
  export type MediaStatsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MediaStats.
     */
    data: MediaStatsCreateManyInput | MediaStatsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MediaStats createManyAndReturn
   */
  export type MediaStatsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaStats
     */
    select?: MediaStatsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MediaStats.
     */
    data: MediaStatsCreateManyInput | MediaStatsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MediaStats update
   */
  export type MediaStatsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaStats
     */
    select?: MediaStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaStatsInclude<ExtArgs> | null
    /**
     * The data needed to update a MediaStats.
     */
    data: XOR<MediaStatsUpdateInput, MediaStatsUncheckedUpdateInput>
    /**
     * Choose, which MediaStats to update.
     */
    where: MediaStatsWhereUniqueInput
  }

  /**
   * MediaStats updateMany
   */
  export type MediaStatsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MediaStats.
     */
    data: XOR<MediaStatsUpdateManyMutationInput, MediaStatsUncheckedUpdateManyInput>
    /**
     * Filter which MediaStats to update
     */
    where?: MediaStatsWhereInput
  }

  /**
   * MediaStats upsert
   */
  export type MediaStatsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaStats
     */
    select?: MediaStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaStatsInclude<ExtArgs> | null
    /**
     * The filter to search for the MediaStats to update in case it exists.
     */
    where: MediaStatsWhereUniqueInput
    /**
     * In case the MediaStats found by the `where` argument doesn't exist, create a new MediaStats with this data.
     */
    create: XOR<MediaStatsCreateInput, MediaStatsUncheckedCreateInput>
    /**
     * In case the MediaStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MediaStatsUpdateInput, MediaStatsUncheckedUpdateInput>
  }

  /**
   * MediaStats delete
   */
  export type MediaStatsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaStats
     */
    select?: MediaStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaStatsInclude<ExtArgs> | null
    /**
     * Filter which MediaStats to delete.
     */
    where: MediaStatsWhereUniqueInput
  }

  /**
   * MediaStats deleteMany
   */
  export type MediaStatsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MediaStats to delete
     */
    where?: MediaStatsWhereInput
  }

  /**
   * MediaStats.warmupStatsSent
   */
  export type MediaStats$warmupStatsSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarmupStats
     */
    select?: WarmupStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarmupStatsInclude<ExtArgs> | null
    where?: WarmupStatsWhereInput
    orderBy?: WarmupStatsOrderByWithRelationInput | WarmupStatsOrderByWithRelationInput[]
    cursor?: WarmupStatsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WarmupStatsScalarFieldEnum | WarmupStatsScalarFieldEnum[]
  }

  /**
   * MediaStats.warmupStatsReceived
   */
  export type MediaStats$warmupStatsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarmupStats
     */
    select?: WarmupStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarmupStatsInclude<ExtArgs> | null
    where?: WarmupStatsWhereInput
    orderBy?: WarmupStatsOrderByWithRelationInput | WarmupStatsOrderByWithRelationInput[]
    cursor?: WarmupStatsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WarmupStatsScalarFieldEnum | WarmupStatsScalarFieldEnum[]
  }

  /**
   * MediaStats without action
   */
  export type MediaStatsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaStats
     */
    select?: MediaStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaStatsInclude<ExtArgs> | null
  }


  /**
   * Model WarmupStats
   */

  export type AggregateWarmupStats = {
    _count: WarmupStatsCountAggregateOutputType | null
    _avg: WarmupStatsAvgAggregateOutputType | null
    _sum: WarmupStatsSumAggregateOutputType | null
    _min: WarmupStatsMinAggregateOutputType | null
    _max: WarmupStatsMaxAggregateOutputType | null
  }

  export type WarmupStatsAvgAggregateOutputType = {
    id: number | null
    messagesSent: number | null
    messagesReceived: number | null
    warmupTime: number | null
    progress: number | null
    userId: number | null
    mediaStatsId: number | null
    mediaReceivedId: number | null
  }

  export type WarmupStatsSumAggregateOutputType = {
    id: number | null
    messagesSent: number | null
    messagesReceived: number | null
    warmupTime: number | null
    progress: number | null
    userId: number | null
    mediaStatsId: number | null
    mediaReceivedId: number | null
  }

  export type WarmupStatsMinAggregateOutputType = {
    id: number | null
    instanceName: string | null
    status: string | null
    messagesSent: number | null
    messagesReceived: number | null
    warmupTime: number | null
    lastActive: Date | null
    startTime: Date | null
    pauseTime: Date | null
    progress: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    mediaStatsId: number | null
    mediaReceivedId: number | null
  }

  export type WarmupStatsMaxAggregateOutputType = {
    id: number | null
    instanceName: string | null
    status: string | null
    messagesSent: number | null
    messagesReceived: number | null
    warmupTime: number | null
    lastActive: Date | null
    startTime: Date | null
    pauseTime: Date | null
    progress: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    mediaStatsId: number | null
    mediaReceivedId: number | null
  }

  export type WarmupStatsCountAggregateOutputType = {
    id: number
    instanceName: number
    status: number
    messagesSent: number
    messagesReceived: number
    warmupTime: number
    lastActive: number
    startTime: number
    pauseTime: number
    progress: number
    userId: number
    createdAt: number
    updatedAt: number
    mediaStatsId: number
    mediaReceivedId: number
    _all: number
  }


  export type WarmupStatsAvgAggregateInputType = {
    id?: true
    messagesSent?: true
    messagesReceived?: true
    warmupTime?: true
    progress?: true
    userId?: true
    mediaStatsId?: true
    mediaReceivedId?: true
  }

  export type WarmupStatsSumAggregateInputType = {
    id?: true
    messagesSent?: true
    messagesReceived?: true
    warmupTime?: true
    progress?: true
    userId?: true
    mediaStatsId?: true
    mediaReceivedId?: true
  }

  export type WarmupStatsMinAggregateInputType = {
    id?: true
    instanceName?: true
    status?: true
    messagesSent?: true
    messagesReceived?: true
    warmupTime?: true
    lastActive?: true
    startTime?: true
    pauseTime?: true
    progress?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    mediaStatsId?: true
    mediaReceivedId?: true
  }

  export type WarmupStatsMaxAggregateInputType = {
    id?: true
    instanceName?: true
    status?: true
    messagesSent?: true
    messagesReceived?: true
    warmupTime?: true
    lastActive?: true
    startTime?: true
    pauseTime?: true
    progress?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    mediaStatsId?: true
    mediaReceivedId?: true
  }

  export type WarmupStatsCountAggregateInputType = {
    id?: true
    instanceName?: true
    status?: true
    messagesSent?: true
    messagesReceived?: true
    warmupTime?: true
    lastActive?: true
    startTime?: true
    pauseTime?: true
    progress?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    mediaStatsId?: true
    mediaReceivedId?: true
    _all?: true
  }

  export type WarmupStatsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WarmupStats to aggregate.
     */
    where?: WarmupStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WarmupStats to fetch.
     */
    orderBy?: WarmupStatsOrderByWithRelationInput | WarmupStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WarmupStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WarmupStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WarmupStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WarmupStats
    **/
    _count?: true | WarmupStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WarmupStatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WarmupStatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WarmupStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WarmupStatsMaxAggregateInputType
  }

  export type GetWarmupStatsAggregateType<T extends WarmupStatsAggregateArgs> = {
        [P in keyof T & keyof AggregateWarmupStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWarmupStats[P]>
      : GetScalarType<T[P], AggregateWarmupStats[P]>
  }




  export type WarmupStatsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WarmupStatsWhereInput
    orderBy?: WarmupStatsOrderByWithAggregationInput | WarmupStatsOrderByWithAggregationInput[]
    by: WarmupStatsScalarFieldEnum[] | WarmupStatsScalarFieldEnum
    having?: WarmupStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WarmupStatsCountAggregateInputType | true
    _avg?: WarmupStatsAvgAggregateInputType
    _sum?: WarmupStatsSumAggregateInputType
    _min?: WarmupStatsMinAggregateInputType
    _max?: WarmupStatsMaxAggregateInputType
  }

  export type WarmupStatsGroupByOutputType = {
    id: number
    instanceName: string
    status: string
    messagesSent: number
    messagesReceived: number
    warmupTime: number
    lastActive: Date
    startTime: Date | null
    pauseTime: Date | null
    progress: number
    userId: number
    createdAt: Date
    updatedAt: Date
    mediaStatsId: number | null
    mediaReceivedId: number | null
    _count: WarmupStatsCountAggregateOutputType | null
    _avg: WarmupStatsAvgAggregateOutputType | null
    _sum: WarmupStatsSumAggregateOutputType | null
    _min: WarmupStatsMinAggregateOutputType | null
    _max: WarmupStatsMaxAggregateOutputType | null
  }

  type GetWarmupStatsGroupByPayload<T extends WarmupStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WarmupStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WarmupStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WarmupStatsGroupByOutputType[P]>
            : GetScalarType<T[P], WarmupStatsGroupByOutputType[P]>
        }
      >
    >


  export type WarmupStatsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instanceName?: boolean
    status?: boolean
    messagesSent?: boolean
    messagesReceived?: boolean
    warmupTime?: boolean
    lastActive?: boolean
    startTime?: boolean
    pauseTime?: boolean
    progress?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    mediaStatsId?: boolean
    mediaReceivedId?: boolean
    mediaStats?: boolean | WarmupStats$mediaStatsArgs<ExtArgs>
    mediaReceived?: boolean | WarmupStats$mediaReceivedArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    instance?: boolean | InstanceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["warmupStats"]>

  export type WarmupStatsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instanceName?: boolean
    status?: boolean
    messagesSent?: boolean
    messagesReceived?: boolean
    warmupTime?: boolean
    lastActive?: boolean
    startTime?: boolean
    pauseTime?: boolean
    progress?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    mediaStatsId?: boolean
    mediaReceivedId?: boolean
    mediaStats?: boolean | WarmupStats$mediaStatsArgs<ExtArgs>
    mediaReceived?: boolean | WarmupStats$mediaReceivedArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    instance?: boolean | InstanceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["warmupStats"]>

  export type WarmupStatsSelectScalar = {
    id?: boolean
    instanceName?: boolean
    status?: boolean
    messagesSent?: boolean
    messagesReceived?: boolean
    warmupTime?: boolean
    lastActive?: boolean
    startTime?: boolean
    pauseTime?: boolean
    progress?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    mediaStatsId?: boolean
    mediaReceivedId?: boolean
  }

  export type WarmupStatsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mediaStats?: boolean | WarmupStats$mediaStatsArgs<ExtArgs>
    mediaReceived?: boolean | WarmupStats$mediaReceivedArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    instance?: boolean | InstanceDefaultArgs<ExtArgs>
  }
  export type WarmupStatsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mediaStats?: boolean | WarmupStats$mediaStatsArgs<ExtArgs>
    mediaReceived?: boolean | WarmupStats$mediaReceivedArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    instance?: boolean | InstanceDefaultArgs<ExtArgs>
  }

  export type $WarmupStatsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WarmupStats"
    objects: {
      mediaStats: Prisma.$MediaStatsPayload<ExtArgs> | null
      mediaReceived: Prisma.$MediaStatsPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
      instance: Prisma.$InstancePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      instanceName: string
      status: string
      messagesSent: number
      messagesReceived: number
      warmupTime: number
      lastActive: Date
      startTime: Date | null
      pauseTime: Date | null
      progress: number
      userId: number
      createdAt: Date
      updatedAt: Date
      mediaStatsId: number | null
      mediaReceivedId: number | null
    }, ExtArgs["result"]["warmupStats"]>
    composites: {}
  }

  type WarmupStatsGetPayload<S extends boolean | null | undefined | WarmupStatsDefaultArgs> = $Result.GetResult<Prisma.$WarmupStatsPayload, S>

  type WarmupStatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WarmupStatsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WarmupStatsCountAggregateInputType | true
    }

  export interface WarmupStatsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WarmupStats'], meta: { name: 'WarmupStats' } }
    /**
     * Find zero or one WarmupStats that matches the filter.
     * @param {WarmupStatsFindUniqueArgs} args - Arguments to find a WarmupStats
     * @example
     * // Get one WarmupStats
     * const warmupStats = await prisma.warmupStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WarmupStatsFindUniqueArgs>(args: SelectSubset<T, WarmupStatsFindUniqueArgs<ExtArgs>>): Prisma__WarmupStatsClient<$Result.GetResult<Prisma.$WarmupStatsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WarmupStats that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WarmupStatsFindUniqueOrThrowArgs} args - Arguments to find a WarmupStats
     * @example
     * // Get one WarmupStats
     * const warmupStats = await prisma.warmupStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WarmupStatsFindUniqueOrThrowArgs>(args: SelectSubset<T, WarmupStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WarmupStatsClient<$Result.GetResult<Prisma.$WarmupStatsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WarmupStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarmupStatsFindFirstArgs} args - Arguments to find a WarmupStats
     * @example
     * // Get one WarmupStats
     * const warmupStats = await prisma.warmupStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WarmupStatsFindFirstArgs>(args?: SelectSubset<T, WarmupStatsFindFirstArgs<ExtArgs>>): Prisma__WarmupStatsClient<$Result.GetResult<Prisma.$WarmupStatsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WarmupStats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarmupStatsFindFirstOrThrowArgs} args - Arguments to find a WarmupStats
     * @example
     * // Get one WarmupStats
     * const warmupStats = await prisma.warmupStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WarmupStatsFindFirstOrThrowArgs>(args?: SelectSubset<T, WarmupStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma__WarmupStatsClient<$Result.GetResult<Prisma.$WarmupStatsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WarmupStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarmupStatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WarmupStats
     * const warmupStats = await prisma.warmupStats.findMany()
     * 
     * // Get first 10 WarmupStats
     * const warmupStats = await prisma.warmupStats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const warmupStatsWithIdOnly = await prisma.warmupStats.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WarmupStatsFindManyArgs>(args?: SelectSubset<T, WarmupStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarmupStatsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WarmupStats.
     * @param {WarmupStatsCreateArgs} args - Arguments to create a WarmupStats.
     * @example
     * // Create one WarmupStats
     * const WarmupStats = await prisma.warmupStats.create({
     *   data: {
     *     // ... data to create a WarmupStats
     *   }
     * })
     * 
     */
    create<T extends WarmupStatsCreateArgs>(args: SelectSubset<T, WarmupStatsCreateArgs<ExtArgs>>): Prisma__WarmupStatsClient<$Result.GetResult<Prisma.$WarmupStatsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WarmupStats.
     * @param {WarmupStatsCreateManyArgs} args - Arguments to create many WarmupStats.
     * @example
     * // Create many WarmupStats
     * const warmupStats = await prisma.warmupStats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WarmupStatsCreateManyArgs>(args?: SelectSubset<T, WarmupStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WarmupStats and returns the data saved in the database.
     * @param {WarmupStatsCreateManyAndReturnArgs} args - Arguments to create many WarmupStats.
     * @example
     * // Create many WarmupStats
     * const warmupStats = await prisma.warmupStats.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WarmupStats and only return the `id`
     * const warmupStatsWithIdOnly = await prisma.warmupStats.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WarmupStatsCreateManyAndReturnArgs>(args?: SelectSubset<T, WarmupStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarmupStatsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WarmupStats.
     * @param {WarmupStatsDeleteArgs} args - Arguments to delete one WarmupStats.
     * @example
     * // Delete one WarmupStats
     * const WarmupStats = await prisma.warmupStats.delete({
     *   where: {
     *     // ... filter to delete one WarmupStats
     *   }
     * })
     * 
     */
    delete<T extends WarmupStatsDeleteArgs>(args: SelectSubset<T, WarmupStatsDeleteArgs<ExtArgs>>): Prisma__WarmupStatsClient<$Result.GetResult<Prisma.$WarmupStatsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WarmupStats.
     * @param {WarmupStatsUpdateArgs} args - Arguments to update one WarmupStats.
     * @example
     * // Update one WarmupStats
     * const warmupStats = await prisma.warmupStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WarmupStatsUpdateArgs>(args: SelectSubset<T, WarmupStatsUpdateArgs<ExtArgs>>): Prisma__WarmupStatsClient<$Result.GetResult<Prisma.$WarmupStatsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WarmupStats.
     * @param {WarmupStatsDeleteManyArgs} args - Arguments to filter WarmupStats to delete.
     * @example
     * // Delete a few WarmupStats
     * const { count } = await prisma.warmupStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WarmupStatsDeleteManyArgs>(args?: SelectSubset<T, WarmupStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WarmupStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarmupStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WarmupStats
     * const warmupStats = await prisma.warmupStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WarmupStatsUpdateManyArgs>(args: SelectSubset<T, WarmupStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WarmupStats.
     * @param {WarmupStatsUpsertArgs} args - Arguments to update or create a WarmupStats.
     * @example
     * // Update or create a WarmupStats
     * const warmupStats = await prisma.warmupStats.upsert({
     *   create: {
     *     // ... data to create a WarmupStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WarmupStats we want to update
     *   }
     * })
     */
    upsert<T extends WarmupStatsUpsertArgs>(args: SelectSubset<T, WarmupStatsUpsertArgs<ExtArgs>>): Prisma__WarmupStatsClient<$Result.GetResult<Prisma.$WarmupStatsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WarmupStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarmupStatsCountArgs} args - Arguments to filter WarmupStats to count.
     * @example
     * // Count the number of WarmupStats
     * const count = await prisma.warmupStats.count({
     *   where: {
     *     // ... the filter for the WarmupStats we want to count
     *   }
     * })
    **/
    count<T extends WarmupStatsCountArgs>(
      args?: Subset<T, WarmupStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WarmupStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WarmupStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarmupStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WarmupStatsAggregateArgs>(args: Subset<T, WarmupStatsAggregateArgs>): Prisma.PrismaPromise<GetWarmupStatsAggregateType<T>>

    /**
     * Group by WarmupStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarmupStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WarmupStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WarmupStatsGroupByArgs['orderBy'] }
        : { orderBy?: WarmupStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WarmupStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWarmupStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WarmupStats model
   */
  readonly fields: WarmupStatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WarmupStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WarmupStatsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    mediaStats<T extends WarmupStats$mediaStatsArgs<ExtArgs> = {}>(args?: Subset<T, WarmupStats$mediaStatsArgs<ExtArgs>>): Prisma__MediaStatsClient<$Result.GetResult<Prisma.$MediaStatsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    mediaReceived<T extends WarmupStats$mediaReceivedArgs<ExtArgs> = {}>(args?: Subset<T, WarmupStats$mediaReceivedArgs<ExtArgs>>): Prisma__MediaStatsClient<$Result.GetResult<Prisma.$MediaStatsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    instance<T extends InstanceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstanceDefaultArgs<ExtArgs>>): Prisma__InstanceClient<$Result.GetResult<Prisma.$InstancePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WarmupStats model
   */ 
  interface WarmupStatsFieldRefs {
    readonly id: FieldRef<"WarmupStats", 'Int'>
    readonly instanceName: FieldRef<"WarmupStats", 'String'>
    readonly status: FieldRef<"WarmupStats", 'String'>
    readonly messagesSent: FieldRef<"WarmupStats", 'Int'>
    readonly messagesReceived: FieldRef<"WarmupStats", 'Int'>
    readonly warmupTime: FieldRef<"WarmupStats", 'Int'>
    readonly lastActive: FieldRef<"WarmupStats", 'DateTime'>
    readonly startTime: FieldRef<"WarmupStats", 'DateTime'>
    readonly pauseTime: FieldRef<"WarmupStats", 'DateTime'>
    readonly progress: FieldRef<"WarmupStats", 'Int'>
    readonly userId: FieldRef<"WarmupStats", 'Int'>
    readonly createdAt: FieldRef<"WarmupStats", 'DateTime'>
    readonly updatedAt: FieldRef<"WarmupStats", 'DateTime'>
    readonly mediaStatsId: FieldRef<"WarmupStats", 'Int'>
    readonly mediaReceivedId: FieldRef<"WarmupStats", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * WarmupStats findUnique
   */
  export type WarmupStatsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarmupStats
     */
    select?: WarmupStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarmupStatsInclude<ExtArgs> | null
    /**
     * Filter, which WarmupStats to fetch.
     */
    where: WarmupStatsWhereUniqueInput
  }

  /**
   * WarmupStats findUniqueOrThrow
   */
  export type WarmupStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarmupStats
     */
    select?: WarmupStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarmupStatsInclude<ExtArgs> | null
    /**
     * Filter, which WarmupStats to fetch.
     */
    where: WarmupStatsWhereUniqueInput
  }

  /**
   * WarmupStats findFirst
   */
  export type WarmupStatsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarmupStats
     */
    select?: WarmupStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarmupStatsInclude<ExtArgs> | null
    /**
     * Filter, which WarmupStats to fetch.
     */
    where?: WarmupStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WarmupStats to fetch.
     */
    orderBy?: WarmupStatsOrderByWithRelationInput | WarmupStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WarmupStats.
     */
    cursor?: WarmupStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WarmupStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WarmupStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WarmupStats.
     */
    distinct?: WarmupStatsScalarFieldEnum | WarmupStatsScalarFieldEnum[]
  }

  /**
   * WarmupStats findFirstOrThrow
   */
  export type WarmupStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarmupStats
     */
    select?: WarmupStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarmupStatsInclude<ExtArgs> | null
    /**
     * Filter, which WarmupStats to fetch.
     */
    where?: WarmupStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WarmupStats to fetch.
     */
    orderBy?: WarmupStatsOrderByWithRelationInput | WarmupStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WarmupStats.
     */
    cursor?: WarmupStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WarmupStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WarmupStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WarmupStats.
     */
    distinct?: WarmupStatsScalarFieldEnum | WarmupStatsScalarFieldEnum[]
  }

  /**
   * WarmupStats findMany
   */
  export type WarmupStatsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarmupStats
     */
    select?: WarmupStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarmupStatsInclude<ExtArgs> | null
    /**
     * Filter, which WarmupStats to fetch.
     */
    where?: WarmupStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WarmupStats to fetch.
     */
    orderBy?: WarmupStatsOrderByWithRelationInput | WarmupStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WarmupStats.
     */
    cursor?: WarmupStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WarmupStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WarmupStats.
     */
    skip?: number
    distinct?: WarmupStatsScalarFieldEnum | WarmupStatsScalarFieldEnum[]
  }

  /**
   * WarmupStats create
   */
  export type WarmupStatsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarmupStats
     */
    select?: WarmupStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarmupStatsInclude<ExtArgs> | null
    /**
     * The data needed to create a WarmupStats.
     */
    data: XOR<WarmupStatsCreateInput, WarmupStatsUncheckedCreateInput>
  }

  /**
   * WarmupStats createMany
   */
  export type WarmupStatsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WarmupStats.
     */
    data: WarmupStatsCreateManyInput | WarmupStatsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WarmupStats createManyAndReturn
   */
  export type WarmupStatsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarmupStats
     */
    select?: WarmupStatsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WarmupStats.
     */
    data: WarmupStatsCreateManyInput | WarmupStatsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarmupStatsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WarmupStats update
   */
  export type WarmupStatsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarmupStats
     */
    select?: WarmupStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarmupStatsInclude<ExtArgs> | null
    /**
     * The data needed to update a WarmupStats.
     */
    data: XOR<WarmupStatsUpdateInput, WarmupStatsUncheckedUpdateInput>
    /**
     * Choose, which WarmupStats to update.
     */
    where: WarmupStatsWhereUniqueInput
  }

  /**
   * WarmupStats updateMany
   */
  export type WarmupStatsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WarmupStats.
     */
    data: XOR<WarmupStatsUpdateManyMutationInput, WarmupStatsUncheckedUpdateManyInput>
    /**
     * Filter which WarmupStats to update
     */
    where?: WarmupStatsWhereInput
  }

  /**
   * WarmupStats upsert
   */
  export type WarmupStatsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarmupStats
     */
    select?: WarmupStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarmupStatsInclude<ExtArgs> | null
    /**
     * The filter to search for the WarmupStats to update in case it exists.
     */
    where: WarmupStatsWhereUniqueInput
    /**
     * In case the WarmupStats found by the `where` argument doesn't exist, create a new WarmupStats with this data.
     */
    create: XOR<WarmupStatsCreateInput, WarmupStatsUncheckedCreateInput>
    /**
     * In case the WarmupStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WarmupStatsUpdateInput, WarmupStatsUncheckedUpdateInput>
  }

  /**
   * WarmupStats delete
   */
  export type WarmupStatsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarmupStats
     */
    select?: WarmupStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarmupStatsInclude<ExtArgs> | null
    /**
     * Filter which WarmupStats to delete.
     */
    where: WarmupStatsWhereUniqueInput
  }

  /**
   * WarmupStats deleteMany
   */
  export type WarmupStatsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WarmupStats to delete
     */
    where?: WarmupStatsWhereInput
  }

  /**
   * WarmupStats.mediaStats
   */
  export type WarmupStats$mediaStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaStats
     */
    select?: MediaStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaStatsInclude<ExtArgs> | null
    where?: MediaStatsWhereInput
  }

  /**
   * WarmupStats.mediaReceived
   */
  export type WarmupStats$mediaReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaStats
     */
    select?: MediaStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaStatsInclude<ExtArgs> | null
    where?: MediaStatsWhereInput
  }

  /**
   * WarmupStats without action
   */
  export type WarmupStatsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarmupStats
     */
    select?: WarmupStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarmupStatsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    plan: 'plan',
    status: 'status',
    maxInstances: 'maxInstances',
    trialEndDate: 'trialEndDate',
    stripeCustomerId: 'stripeCustomerId',
    stripeSubscriptionId: 'stripeSubscriptionId',
    stripeSubscriptionStatus: 'stripeSubscriptionStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const InstanceScalarFieldEnum: {
    id: 'id',
    instanceName: 'instanceName',
    connectionStatus: 'connectionStatus',
    number: 'number',
    ownerJid: 'ownerJid',
    profilePicUrl: 'profilePicUrl',
    integration: 'integration',
    token: 'token',
    clientName: 'clientName',
    profileName: 'profileName',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    disconnectedAt: 'disconnectedAt',
    disconnectionObject: 'disconnectionObject',
    disconnectionReasonCode: 'disconnectionReasonCode',
    typebot: 'typebot'
  };

  export type InstanceScalarFieldEnum = (typeof InstanceScalarFieldEnum)[keyof typeof InstanceScalarFieldEnum]


  export const MediaStatsScalarFieldEnum: {
    id: 'id',
    instanceName: 'instanceName',
    date: 'date',
    text: 'text',
    image: 'image',
    video: 'video',
    audio: 'audio',
    sticker: 'sticker',
    reaction: 'reaction',
    isReceived: 'isReceived',
    totalDaily: 'totalDaily',
    totalAllTime: 'totalAllTime',
    totalSent: 'totalSent',
    totalReceived: 'totalReceived',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MediaStatsScalarFieldEnum = (typeof MediaStatsScalarFieldEnum)[keyof typeof MediaStatsScalarFieldEnum]


  export const WarmupStatsScalarFieldEnum: {
    id: 'id',
    instanceName: 'instanceName',
    status: 'status',
    messagesSent: 'messagesSent',
    messagesReceived: 'messagesReceived',
    warmupTime: 'warmupTime',
    lastActive: 'lastActive',
    startTime: 'startTime',
    pauseTime: 'pauseTime',
    progress: 'progress',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    mediaStatsId: 'mediaStatsId',
    mediaReceivedId: 'mediaReceivedId'
  };

  export type WarmupStatsScalarFieldEnum = (typeof WarmupStatsScalarFieldEnum)[keyof typeof WarmupStatsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    plan?: StringFilter<"User"> | string
    status?: BoolFilter<"User"> | boolean
    maxInstances?: IntFilter<"User"> | number
    trialEndDate?: DateTimeNullableFilter<"User"> | Date | string | null
    stripeCustomerId?: StringNullableFilter<"User"> | string | null
    stripeSubscriptionId?: StringNullableFilter<"User"> | string | null
    stripeSubscriptionStatus?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    instances?: InstanceListRelationFilter
    warmupStats?: WarmupStatsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    plan?: SortOrder
    status?: SortOrder
    maxInstances?: SortOrder
    trialEndDate?: SortOrderInput | SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    stripeSubscriptionId?: SortOrderInput | SortOrder
    stripeSubscriptionStatus?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    instances?: InstanceOrderByRelationAggregateInput
    warmupStats?: WarmupStatsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    plan?: StringFilter<"User"> | string
    status?: BoolFilter<"User"> | boolean
    maxInstances?: IntFilter<"User"> | number
    trialEndDate?: DateTimeNullableFilter<"User"> | Date | string | null
    stripeCustomerId?: StringNullableFilter<"User"> | string | null
    stripeSubscriptionId?: StringNullableFilter<"User"> | string | null
    stripeSubscriptionStatus?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    instances?: InstanceListRelationFilter
    warmupStats?: WarmupStatsListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    plan?: SortOrder
    status?: SortOrder
    maxInstances?: SortOrder
    trialEndDate?: SortOrderInput | SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    stripeSubscriptionId?: SortOrderInput | SortOrder
    stripeSubscriptionStatus?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    plan?: StringWithAggregatesFilter<"User"> | string
    status?: BoolWithAggregatesFilter<"User"> | boolean
    maxInstances?: IntWithAggregatesFilter<"User"> | number
    trialEndDate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    stripeCustomerId?: StringNullableWithAggregatesFilter<"User"> | string | null
    stripeSubscriptionId?: StringNullableWithAggregatesFilter<"User"> | string | null
    stripeSubscriptionStatus?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type InstanceWhereInput = {
    AND?: InstanceWhereInput | InstanceWhereInput[]
    OR?: InstanceWhereInput[]
    NOT?: InstanceWhereInput | InstanceWhereInput[]
    id?: IntFilter<"Instance"> | number
    instanceName?: StringFilter<"Instance"> | string
    connectionStatus?: StringFilter<"Instance"> | string
    number?: StringNullableFilter<"Instance"> | string | null
    ownerJid?: StringNullableFilter<"Instance"> | string | null
    profilePicUrl?: StringNullableFilter<"Instance"> | string | null
    integration?: StringFilter<"Instance"> | string
    token?: StringNullableFilter<"Instance"> | string | null
    clientName?: StringNullableFilter<"Instance"> | string | null
    profileName?: StringNullableFilter<"Instance"> | string | null
    userId?: IntFilter<"Instance"> | number
    createdAt?: DateTimeFilter<"Instance"> | Date | string
    updatedAt?: DateTimeFilter<"Instance"> | Date | string
    disconnectedAt?: DateTimeNullableFilter<"Instance"> | Date | string | null
    disconnectionObject?: JsonNullableFilter<"Instance">
    disconnectionReasonCode?: StringNullableFilter<"Instance"> | string | null
    typebot?: JsonNullableFilter<"Instance">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    warmupStats?: XOR<WarmupStatsNullableScalarRelationFilter, WarmupStatsWhereInput> | null
  }

  export type InstanceOrderByWithRelationInput = {
    id?: SortOrder
    instanceName?: SortOrder
    connectionStatus?: SortOrder
    number?: SortOrderInput | SortOrder
    ownerJid?: SortOrderInput | SortOrder
    profilePicUrl?: SortOrderInput | SortOrder
    integration?: SortOrder
    token?: SortOrderInput | SortOrder
    clientName?: SortOrderInput | SortOrder
    profileName?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    disconnectedAt?: SortOrderInput | SortOrder
    disconnectionObject?: SortOrderInput | SortOrder
    disconnectionReasonCode?: SortOrderInput | SortOrder
    typebot?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    warmupStats?: WarmupStatsOrderByWithRelationInput
  }

  export type InstanceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    instanceName?: string
    AND?: InstanceWhereInput | InstanceWhereInput[]
    OR?: InstanceWhereInput[]
    NOT?: InstanceWhereInput | InstanceWhereInput[]
    connectionStatus?: StringFilter<"Instance"> | string
    number?: StringNullableFilter<"Instance"> | string | null
    ownerJid?: StringNullableFilter<"Instance"> | string | null
    profilePicUrl?: StringNullableFilter<"Instance"> | string | null
    integration?: StringFilter<"Instance"> | string
    token?: StringNullableFilter<"Instance"> | string | null
    clientName?: StringNullableFilter<"Instance"> | string | null
    profileName?: StringNullableFilter<"Instance"> | string | null
    userId?: IntFilter<"Instance"> | number
    createdAt?: DateTimeFilter<"Instance"> | Date | string
    updatedAt?: DateTimeFilter<"Instance"> | Date | string
    disconnectedAt?: DateTimeNullableFilter<"Instance"> | Date | string | null
    disconnectionObject?: JsonNullableFilter<"Instance">
    disconnectionReasonCode?: StringNullableFilter<"Instance"> | string | null
    typebot?: JsonNullableFilter<"Instance">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    warmupStats?: XOR<WarmupStatsNullableScalarRelationFilter, WarmupStatsWhereInput> | null
  }, "id" | "instanceName">

  export type InstanceOrderByWithAggregationInput = {
    id?: SortOrder
    instanceName?: SortOrder
    connectionStatus?: SortOrder
    number?: SortOrderInput | SortOrder
    ownerJid?: SortOrderInput | SortOrder
    profilePicUrl?: SortOrderInput | SortOrder
    integration?: SortOrder
    token?: SortOrderInput | SortOrder
    clientName?: SortOrderInput | SortOrder
    profileName?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    disconnectedAt?: SortOrderInput | SortOrder
    disconnectionObject?: SortOrderInput | SortOrder
    disconnectionReasonCode?: SortOrderInput | SortOrder
    typebot?: SortOrderInput | SortOrder
    _count?: InstanceCountOrderByAggregateInput
    _avg?: InstanceAvgOrderByAggregateInput
    _max?: InstanceMaxOrderByAggregateInput
    _min?: InstanceMinOrderByAggregateInput
    _sum?: InstanceSumOrderByAggregateInput
  }

  export type InstanceScalarWhereWithAggregatesInput = {
    AND?: InstanceScalarWhereWithAggregatesInput | InstanceScalarWhereWithAggregatesInput[]
    OR?: InstanceScalarWhereWithAggregatesInput[]
    NOT?: InstanceScalarWhereWithAggregatesInput | InstanceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Instance"> | number
    instanceName?: StringWithAggregatesFilter<"Instance"> | string
    connectionStatus?: StringWithAggregatesFilter<"Instance"> | string
    number?: StringNullableWithAggregatesFilter<"Instance"> | string | null
    ownerJid?: StringNullableWithAggregatesFilter<"Instance"> | string | null
    profilePicUrl?: StringNullableWithAggregatesFilter<"Instance"> | string | null
    integration?: StringWithAggregatesFilter<"Instance"> | string
    token?: StringNullableWithAggregatesFilter<"Instance"> | string | null
    clientName?: StringNullableWithAggregatesFilter<"Instance"> | string | null
    profileName?: StringNullableWithAggregatesFilter<"Instance"> | string | null
    userId?: IntWithAggregatesFilter<"Instance"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Instance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Instance"> | Date | string
    disconnectedAt?: DateTimeNullableWithAggregatesFilter<"Instance"> | Date | string | null
    disconnectionObject?: JsonNullableWithAggregatesFilter<"Instance">
    disconnectionReasonCode?: StringNullableWithAggregatesFilter<"Instance"> | string | null
    typebot?: JsonNullableWithAggregatesFilter<"Instance">
  }

  export type MediaStatsWhereInput = {
    AND?: MediaStatsWhereInput | MediaStatsWhereInput[]
    OR?: MediaStatsWhereInput[]
    NOT?: MediaStatsWhereInput | MediaStatsWhereInput[]
    id?: IntFilter<"MediaStats"> | number
    instanceName?: StringFilter<"MediaStats"> | string
    date?: DateTimeFilter<"MediaStats"> | Date | string
    text?: IntFilter<"MediaStats"> | number
    image?: IntFilter<"MediaStats"> | number
    video?: IntFilter<"MediaStats"> | number
    audio?: IntFilter<"MediaStats"> | number
    sticker?: IntFilter<"MediaStats"> | number
    reaction?: IntFilter<"MediaStats"> | number
    isReceived?: BoolFilter<"MediaStats"> | boolean
    totalDaily?: IntFilter<"MediaStats"> | number
    totalAllTime?: IntFilter<"MediaStats"> | number
    totalSent?: IntFilter<"MediaStats"> | number
    totalReceived?: IntFilter<"MediaStats"> | number
    createdAt?: DateTimeFilter<"MediaStats"> | Date | string
    updatedAt?: DateTimeFilter<"MediaStats"> | Date | string
    warmupStatsSent?: WarmupStatsListRelationFilter
    warmupStatsReceived?: WarmupStatsListRelationFilter
  }

  export type MediaStatsOrderByWithRelationInput = {
    id?: SortOrder
    instanceName?: SortOrder
    date?: SortOrder
    text?: SortOrder
    image?: SortOrder
    video?: SortOrder
    audio?: SortOrder
    sticker?: SortOrder
    reaction?: SortOrder
    isReceived?: SortOrder
    totalDaily?: SortOrder
    totalAllTime?: SortOrder
    totalSent?: SortOrder
    totalReceived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    warmupStatsSent?: WarmupStatsOrderByRelationAggregateInput
    warmupStatsReceived?: WarmupStatsOrderByRelationAggregateInput
  }

  export type MediaStatsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MediaStatsWhereInput | MediaStatsWhereInput[]
    OR?: MediaStatsWhereInput[]
    NOT?: MediaStatsWhereInput | MediaStatsWhereInput[]
    instanceName?: StringFilter<"MediaStats"> | string
    date?: DateTimeFilter<"MediaStats"> | Date | string
    text?: IntFilter<"MediaStats"> | number
    image?: IntFilter<"MediaStats"> | number
    video?: IntFilter<"MediaStats"> | number
    audio?: IntFilter<"MediaStats"> | number
    sticker?: IntFilter<"MediaStats"> | number
    reaction?: IntFilter<"MediaStats"> | number
    isReceived?: BoolFilter<"MediaStats"> | boolean
    totalDaily?: IntFilter<"MediaStats"> | number
    totalAllTime?: IntFilter<"MediaStats"> | number
    totalSent?: IntFilter<"MediaStats"> | number
    totalReceived?: IntFilter<"MediaStats"> | number
    createdAt?: DateTimeFilter<"MediaStats"> | Date | string
    updatedAt?: DateTimeFilter<"MediaStats"> | Date | string
    warmupStatsSent?: WarmupStatsListRelationFilter
    warmupStatsReceived?: WarmupStatsListRelationFilter
  }, "id">

  export type MediaStatsOrderByWithAggregationInput = {
    id?: SortOrder
    instanceName?: SortOrder
    date?: SortOrder
    text?: SortOrder
    image?: SortOrder
    video?: SortOrder
    audio?: SortOrder
    sticker?: SortOrder
    reaction?: SortOrder
    isReceived?: SortOrder
    totalDaily?: SortOrder
    totalAllTime?: SortOrder
    totalSent?: SortOrder
    totalReceived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MediaStatsCountOrderByAggregateInput
    _avg?: MediaStatsAvgOrderByAggregateInput
    _max?: MediaStatsMaxOrderByAggregateInput
    _min?: MediaStatsMinOrderByAggregateInput
    _sum?: MediaStatsSumOrderByAggregateInput
  }

  export type MediaStatsScalarWhereWithAggregatesInput = {
    AND?: MediaStatsScalarWhereWithAggregatesInput | MediaStatsScalarWhereWithAggregatesInput[]
    OR?: MediaStatsScalarWhereWithAggregatesInput[]
    NOT?: MediaStatsScalarWhereWithAggregatesInput | MediaStatsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MediaStats"> | number
    instanceName?: StringWithAggregatesFilter<"MediaStats"> | string
    date?: DateTimeWithAggregatesFilter<"MediaStats"> | Date | string
    text?: IntWithAggregatesFilter<"MediaStats"> | number
    image?: IntWithAggregatesFilter<"MediaStats"> | number
    video?: IntWithAggregatesFilter<"MediaStats"> | number
    audio?: IntWithAggregatesFilter<"MediaStats"> | number
    sticker?: IntWithAggregatesFilter<"MediaStats"> | number
    reaction?: IntWithAggregatesFilter<"MediaStats"> | number
    isReceived?: BoolWithAggregatesFilter<"MediaStats"> | boolean
    totalDaily?: IntWithAggregatesFilter<"MediaStats"> | number
    totalAllTime?: IntWithAggregatesFilter<"MediaStats"> | number
    totalSent?: IntWithAggregatesFilter<"MediaStats"> | number
    totalReceived?: IntWithAggregatesFilter<"MediaStats"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MediaStats"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MediaStats"> | Date | string
  }

  export type WarmupStatsWhereInput = {
    AND?: WarmupStatsWhereInput | WarmupStatsWhereInput[]
    OR?: WarmupStatsWhereInput[]
    NOT?: WarmupStatsWhereInput | WarmupStatsWhereInput[]
    id?: IntFilter<"WarmupStats"> | number
    instanceName?: StringFilter<"WarmupStats"> | string
    status?: StringFilter<"WarmupStats"> | string
    messagesSent?: IntFilter<"WarmupStats"> | number
    messagesReceived?: IntFilter<"WarmupStats"> | number
    warmupTime?: IntFilter<"WarmupStats"> | number
    lastActive?: DateTimeFilter<"WarmupStats"> | Date | string
    startTime?: DateTimeNullableFilter<"WarmupStats"> | Date | string | null
    pauseTime?: DateTimeNullableFilter<"WarmupStats"> | Date | string | null
    progress?: IntFilter<"WarmupStats"> | number
    userId?: IntFilter<"WarmupStats"> | number
    createdAt?: DateTimeFilter<"WarmupStats"> | Date | string
    updatedAt?: DateTimeFilter<"WarmupStats"> | Date | string
    mediaStatsId?: IntNullableFilter<"WarmupStats"> | number | null
    mediaReceivedId?: IntNullableFilter<"WarmupStats"> | number | null
    mediaStats?: XOR<MediaStatsNullableScalarRelationFilter, MediaStatsWhereInput> | null
    mediaReceived?: XOR<MediaStatsNullableScalarRelationFilter, MediaStatsWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    instance?: XOR<InstanceScalarRelationFilter, InstanceWhereInput>
  }

  export type WarmupStatsOrderByWithRelationInput = {
    id?: SortOrder
    instanceName?: SortOrder
    status?: SortOrder
    messagesSent?: SortOrder
    messagesReceived?: SortOrder
    warmupTime?: SortOrder
    lastActive?: SortOrder
    startTime?: SortOrderInput | SortOrder
    pauseTime?: SortOrderInput | SortOrder
    progress?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    mediaStatsId?: SortOrderInput | SortOrder
    mediaReceivedId?: SortOrderInput | SortOrder
    mediaStats?: MediaStatsOrderByWithRelationInput
    mediaReceived?: MediaStatsOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    instance?: InstanceOrderByWithRelationInput
  }

  export type WarmupStatsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    instanceName?: string
    AND?: WarmupStatsWhereInput | WarmupStatsWhereInput[]
    OR?: WarmupStatsWhereInput[]
    NOT?: WarmupStatsWhereInput | WarmupStatsWhereInput[]
    status?: StringFilter<"WarmupStats"> | string
    messagesSent?: IntFilter<"WarmupStats"> | number
    messagesReceived?: IntFilter<"WarmupStats"> | number
    warmupTime?: IntFilter<"WarmupStats"> | number
    lastActive?: DateTimeFilter<"WarmupStats"> | Date | string
    startTime?: DateTimeNullableFilter<"WarmupStats"> | Date | string | null
    pauseTime?: DateTimeNullableFilter<"WarmupStats"> | Date | string | null
    progress?: IntFilter<"WarmupStats"> | number
    userId?: IntFilter<"WarmupStats"> | number
    createdAt?: DateTimeFilter<"WarmupStats"> | Date | string
    updatedAt?: DateTimeFilter<"WarmupStats"> | Date | string
    mediaStatsId?: IntNullableFilter<"WarmupStats"> | number | null
    mediaReceivedId?: IntNullableFilter<"WarmupStats"> | number | null
    mediaStats?: XOR<MediaStatsNullableScalarRelationFilter, MediaStatsWhereInput> | null
    mediaReceived?: XOR<MediaStatsNullableScalarRelationFilter, MediaStatsWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    instance?: XOR<InstanceScalarRelationFilter, InstanceWhereInput>
  }, "id" | "instanceName">

  export type WarmupStatsOrderByWithAggregationInput = {
    id?: SortOrder
    instanceName?: SortOrder
    status?: SortOrder
    messagesSent?: SortOrder
    messagesReceived?: SortOrder
    warmupTime?: SortOrder
    lastActive?: SortOrder
    startTime?: SortOrderInput | SortOrder
    pauseTime?: SortOrderInput | SortOrder
    progress?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    mediaStatsId?: SortOrderInput | SortOrder
    mediaReceivedId?: SortOrderInput | SortOrder
    _count?: WarmupStatsCountOrderByAggregateInput
    _avg?: WarmupStatsAvgOrderByAggregateInput
    _max?: WarmupStatsMaxOrderByAggregateInput
    _min?: WarmupStatsMinOrderByAggregateInput
    _sum?: WarmupStatsSumOrderByAggregateInput
  }

  export type WarmupStatsScalarWhereWithAggregatesInput = {
    AND?: WarmupStatsScalarWhereWithAggregatesInput | WarmupStatsScalarWhereWithAggregatesInput[]
    OR?: WarmupStatsScalarWhereWithAggregatesInput[]
    NOT?: WarmupStatsScalarWhereWithAggregatesInput | WarmupStatsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WarmupStats"> | number
    instanceName?: StringWithAggregatesFilter<"WarmupStats"> | string
    status?: StringWithAggregatesFilter<"WarmupStats"> | string
    messagesSent?: IntWithAggregatesFilter<"WarmupStats"> | number
    messagesReceived?: IntWithAggregatesFilter<"WarmupStats"> | number
    warmupTime?: IntWithAggregatesFilter<"WarmupStats"> | number
    lastActive?: DateTimeWithAggregatesFilter<"WarmupStats"> | Date | string
    startTime?: DateTimeNullableWithAggregatesFilter<"WarmupStats"> | Date | string | null
    pauseTime?: DateTimeNullableWithAggregatesFilter<"WarmupStats"> | Date | string | null
    progress?: IntWithAggregatesFilter<"WarmupStats"> | number
    userId?: IntWithAggregatesFilter<"WarmupStats"> | number
    createdAt?: DateTimeWithAggregatesFilter<"WarmupStats"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WarmupStats"> | Date | string
    mediaStatsId?: IntNullableWithAggregatesFilter<"WarmupStats"> | number | null
    mediaReceivedId?: IntNullableWithAggregatesFilter<"WarmupStats"> | number | null
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
    plan?: string
    status?: boolean
    maxInstances?: number
    trialEndDate?: Date | string | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    instances?: InstanceCreateNestedManyWithoutUserInput
    warmupStats?: WarmupStatsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    plan?: string
    status?: boolean
    maxInstances?: number
    trialEndDate?: Date | string | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    instances?: InstanceUncheckedCreateNestedManyWithoutUserInput
    warmupStats?: WarmupStatsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    maxInstances?: IntFieldUpdateOperationsInput | number
    trialEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instances?: InstanceUpdateManyWithoutUserNestedInput
    warmupStats?: WarmupStatsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    maxInstances?: IntFieldUpdateOperationsInput | number
    trialEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instances?: InstanceUncheckedUpdateManyWithoutUserNestedInput
    warmupStats?: WarmupStatsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    plan?: string
    status?: boolean
    maxInstances?: number
    trialEndDate?: Date | string | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    maxInstances?: IntFieldUpdateOperationsInput | number
    trialEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    maxInstances?: IntFieldUpdateOperationsInput | number
    trialEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstanceCreateInput = {
    instanceName: string
    connectionStatus?: string
    number?: string | null
    ownerJid?: string | null
    profilePicUrl?: string | null
    integration?: string
    token?: string | null
    clientName?: string | null
    profileName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    disconnectedAt?: Date | string | null
    disconnectionObject?: NullableJsonNullValueInput | InputJsonValue
    disconnectionReasonCode?: string | null
    typebot?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutInstancesInput
    warmupStats?: WarmupStatsCreateNestedOneWithoutInstanceInput
  }

  export type InstanceUncheckedCreateInput = {
    id?: number
    instanceName: string
    connectionStatus?: string
    number?: string | null
    ownerJid?: string | null
    profilePicUrl?: string | null
    integration?: string
    token?: string | null
    clientName?: string | null
    profileName?: string | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    disconnectedAt?: Date | string | null
    disconnectionObject?: NullableJsonNullValueInput | InputJsonValue
    disconnectionReasonCode?: string | null
    typebot?: NullableJsonNullValueInput | InputJsonValue
    warmupStats?: WarmupStatsUncheckedCreateNestedOneWithoutInstanceInput
  }

  export type InstanceUpdateInput = {
    instanceName?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    number?: NullableStringFieldUpdateOperationsInput | string | null
    ownerJid?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    integration?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    profileName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disconnectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disconnectionObject?: NullableJsonNullValueInput | InputJsonValue
    disconnectionReasonCode?: NullableStringFieldUpdateOperationsInput | string | null
    typebot?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutInstancesNestedInput
    warmupStats?: WarmupStatsUpdateOneWithoutInstanceNestedInput
  }

  export type InstanceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    instanceName?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    number?: NullableStringFieldUpdateOperationsInput | string | null
    ownerJid?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    integration?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    profileName?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disconnectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disconnectionObject?: NullableJsonNullValueInput | InputJsonValue
    disconnectionReasonCode?: NullableStringFieldUpdateOperationsInput | string | null
    typebot?: NullableJsonNullValueInput | InputJsonValue
    warmupStats?: WarmupStatsUncheckedUpdateOneWithoutInstanceNestedInput
  }

  export type InstanceCreateManyInput = {
    id?: number
    instanceName: string
    connectionStatus?: string
    number?: string | null
    ownerJid?: string | null
    profilePicUrl?: string | null
    integration?: string
    token?: string | null
    clientName?: string | null
    profileName?: string | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    disconnectedAt?: Date | string | null
    disconnectionObject?: NullableJsonNullValueInput | InputJsonValue
    disconnectionReasonCode?: string | null
    typebot?: NullableJsonNullValueInput | InputJsonValue
  }

  export type InstanceUpdateManyMutationInput = {
    instanceName?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    number?: NullableStringFieldUpdateOperationsInput | string | null
    ownerJid?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    integration?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    profileName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disconnectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disconnectionObject?: NullableJsonNullValueInput | InputJsonValue
    disconnectionReasonCode?: NullableStringFieldUpdateOperationsInput | string | null
    typebot?: NullableJsonNullValueInput | InputJsonValue
  }

  export type InstanceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    instanceName?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    number?: NullableStringFieldUpdateOperationsInput | string | null
    ownerJid?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    integration?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    profileName?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disconnectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disconnectionObject?: NullableJsonNullValueInput | InputJsonValue
    disconnectionReasonCode?: NullableStringFieldUpdateOperationsInput | string | null
    typebot?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MediaStatsCreateInput = {
    instanceName: string
    date?: Date | string
    text?: number
    image?: number
    video?: number
    audio?: number
    sticker?: number
    reaction?: number
    isReceived?: boolean
    totalDaily?: number
    totalAllTime?: number
    totalSent?: number
    totalReceived?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warmupStatsSent?: WarmupStatsCreateNestedManyWithoutMediaStatsInput
    warmupStatsReceived?: WarmupStatsCreateNestedManyWithoutMediaReceivedInput
  }

  export type MediaStatsUncheckedCreateInput = {
    id?: number
    instanceName: string
    date?: Date | string
    text?: number
    image?: number
    video?: number
    audio?: number
    sticker?: number
    reaction?: number
    isReceived?: boolean
    totalDaily?: number
    totalAllTime?: number
    totalSent?: number
    totalReceived?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warmupStatsSent?: WarmupStatsUncheckedCreateNestedManyWithoutMediaStatsInput
    warmupStatsReceived?: WarmupStatsUncheckedCreateNestedManyWithoutMediaReceivedInput
  }

  export type MediaStatsUpdateInput = {
    instanceName?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: IntFieldUpdateOperationsInput | number
    image?: IntFieldUpdateOperationsInput | number
    video?: IntFieldUpdateOperationsInput | number
    audio?: IntFieldUpdateOperationsInput | number
    sticker?: IntFieldUpdateOperationsInput | number
    reaction?: IntFieldUpdateOperationsInput | number
    isReceived?: BoolFieldUpdateOperationsInput | boolean
    totalDaily?: IntFieldUpdateOperationsInput | number
    totalAllTime?: IntFieldUpdateOperationsInput | number
    totalSent?: IntFieldUpdateOperationsInput | number
    totalReceived?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warmupStatsSent?: WarmupStatsUpdateManyWithoutMediaStatsNestedInput
    warmupStatsReceived?: WarmupStatsUpdateManyWithoutMediaReceivedNestedInput
  }

  export type MediaStatsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    instanceName?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: IntFieldUpdateOperationsInput | number
    image?: IntFieldUpdateOperationsInput | number
    video?: IntFieldUpdateOperationsInput | number
    audio?: IntFieldUpdateOperationsInput | number
    sticker?: IntFieldUpdateOperationsInput | number
    reaction?: IntFieldUpdateOperationsInput | number
    isReceived?: BoolFieldUpdateOperationsInput | boolean
    totalDaily?: IntFieldUpdateOperationsInput | number
    totalAllTime?: IntFieldUpdateOperationsInput | number
    totalSent?: IntFieldUpdateOperationsInput | number
    totalReceived?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warmupStatsSent?: WarmupStatsUncheckedUpdateManyWithoutMediaStatsNestedInput
    warmupStatsReceived?: WarmupStatsUncheckedUpdateManyWithoutMediaReceivedNestedInput
  }

  export type MediaStatsCreateManyInput = {
    id?: number
    instanceName: string
    date?: Date | string
    text?: number
    image?: number
    video?: number
    audio?: number
    sticker?: number
    reaction?: number
    isReceived?: boolean
    totalDaily?: number
    totalAllTime?: number
    totalSent?: number
    totalReceived?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaStatsUpdateManyMutationInput = {
    instanceName?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: IntFieldUpdateOperationsInput | number
    image?: IntFieldUpdateOperationsInput | number
    video?: IntFieldUpdateOperationsInput | number
    audio?: IntFieldUpdateOperationsInput | number
    sticker?: IntFieldUpdateOperationsInput | number
    reaction?: IntFieldUpdateOperationsInput | number
    isReceived?: BoolFieldUpdateOperationsInput | boolean
    totalDaily?: IntFieldUpdateOperationsInput | number
    totalAllTime?: IntFieldUpdateOperationsInput | number
    totalSent?: IntFieldUpdateOperationsInput | number
    totalReceived?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaStatsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    instanceName?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: IntFieldUpdateOperationsInput | number
    image?: IntFieldUpdateOperationsInput | number
    video?: IntFieldUpdateOperationsInput | number
    audio?: IntFieldUpdateOperationsInput | number
    sticker?: IntFieldUpdateOperationsInput | number
    reaction?: IntFieldUpdateOperationsInput | number
    isReceived?: BoolFieldUpdateOperationsInput | boolean
    totalDaily?: IntFieldUpdateOperationsInput | number
    totalAllTime?: IntFieldUpdateOperationsInput | number
    totalSent?: IntFieldUpdateOperationsInput | number
    totalReceived?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarmupStatsCreateInput = {
    status?: string
    messagesSent?: number
    messagesReceived?: number
    warmupTime?: number
    lastActive?: Date | string
    startTime?: Date | string | null
    pauseTime?: Date | string | null
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    mediaStats?: MediaStatsCreateNestedOneWithoutWarmupStatsSentInput
    mediaReceived?: MediaStatsCreateNestedOneWithoutWarmupStatsReceivedInput
    user: UserCreateNestedOneWithoutWarmupStatsInput
    instance: InstanceCreateNestedOneWithoutWarmupStatsInput
  }

  export type WarmupStatsUncheckedCreateInput = {
    id?: number
    instanceName: string
    status?: string
    messagesSent?: number
    messagesReceived?: number
    warmupTime?: number
    lastActive?: Date | string
    startTime?: Date | string | null
    pauseTime?: Date | string | null
    progress?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    mediaStatsId?: number | null
    mediaReceivedId?: number | null
  }

  export type WarmupStatsUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    warmupTime?: IntFieldUpdateOperationsInput | number
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pauseTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaStats?: MediaStatsUpdateOneWithoutWarmupStatsSentNestedInput
    mediaReceived?: MediaStatsUpdateOneWithoutWarmupStatsReceivedNestedInput
    user?: UserUpdateOneRequiredWithoutWarmupStatsNestedInput
    instance?: InstanceUpdateOneRequiredWithoutWarmupStatsNestedInput
  }

  export type WarmupStatsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    instanceName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    warmupTime?: IntFieldUpdateOperationsInput | number
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pauseTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaStatsId?: NullableIntFieldUpdateOperationsInput | number | null
    mediaReceivedId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WarmupStatsCreateManyInput = {
    id?: number
    instanceName: string
    status?: string
    messagesSent?: number
    messagesReceived?: number
    warmupTime?: number
    lastActive?: Date | string
    startTime?: Date | string | null
    pauseTime?: Date | string | null
    progress?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    mediaStatsId?: number | null
    mediaReceivedId?: number | null
  }

  export type WarmupStatsUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    warmupTime?: IntFieldUpdateOperationsInput | number
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pauseTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarmupStatsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    instanceName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    warmupTime?: IntFieldUpdateOperationsInput | number
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pauseTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaStatsId?: NullableIntFieldUpdateOperationsInput | number | null
    mediaReceivedId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type InstanceListRelationFilter = {
    every?: InstanceWhereInput
    some?: InstanceWhereInput
    none?: InstanceWhereInput
  }

  export type WarmupStatsListRelationFilter = {
    every?: WarmupStatsWhereInput
    some?: WarmupStatsWhereInput
    none?: WarmupStatsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type InstanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WarmupStatsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    plan?: SortOrder
    status?: SortOrder
    maxInstances?: SortOrder
    trialEndDate?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubscriptionId?: SortOrder
    stripeSubscriptionStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    maxInstances?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    plan?: SortOrder
    status?: SortOrder
    maxInstances?: SortOrder
    trialEndDate?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubscriptionId?: SortOrder
    stripeSubscriptionStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    plan?: SortOrder
    status?: SortOrder
    maxInstances?: SortOrder
    trialEndDate?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubscriptionId?: SortOrder
    stripeSubscriptionStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    maxInstances?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type WarmupStatsNullableScalarRelationFilter = {
    is?: WarmupStatsWhereInput | null
    isNot?: WarmupStatsWhereInput | null
  }

  export type InstanceCountOrderByAggregateInput = {
    id?: SortOrder
    instanceName?: SortOrder
    connectionStatus?: SortOrder
    number?: SortOrder
    ownerJid?: SortOrder
    profilePicUrl?: SortOrder
    integration?: SortOrder
    token?: SortOrder
    clientName?: SortOrder
    profileName?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    disconnectedAt?: SortOrder
    disconnectionObject?: SortOrder
    disconnectionReasonCode?: SortOrder
    typebot?: SortOrder
  }

  export type InstanceAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type InstanceMaxOrderByAggregateInput = {
    id?: SortOrder
    instanceName?: SortOrder
    connectionStatus?: SortOrder
    number?: SortOrder
    ownerJid?: SortOrder
    profilePicUrl?: SortOrder
    integration?: SortOrder
    token?: SortOrder
    clientName?: SortOrder
    profileName?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    disconnectedAt?: SortOrder
    disconnectionReasonCode?: SortOrder
  }

  export type InstanceMinOrderByAggregateInput = {
    id?: SortOrder
    instanceName?: SortOrder
    connectionStatus?: SortOrder
    number?: SortOrder
    ownerJid?: SortOrder
    profilePicUrl?: SortOrder
    integration?: SortOrder
    token?: SortOrder
    clientName?: SortOrder
    profileName?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    disconnectedAt?: SortOrder
    disconnectionReasonCode?: SortOrder
  }

  export type InstanceSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type MediaStatsCountOrderByAggregateInput = {
    id?: SortOrder
    instanceName?: SortOrder
    date?: SortOrder
    text?: SortOrder
    image?: SortOrder
    video?: SortOrder
    audio?: SortOrder
    sticker?: SortOrder
    reaction?: SortOrder
    isReceived?: SortOrder
    totalDaily?: SortOrder
    totalAllTime?: SortOrder
    totalSent?: SortOrder
    totalReceived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MediaStatsAvgOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    image?: SortOrder
    video?: SortOrder
    audio?: SortOrder
    sticker?: SortOrder
    reaction?: SortOrder
    totalDaily?: SortOrder
    totalAllTime?: SortOrder
    totalSent?: SortOrder
    totalReceived?: SortOrder
  }

  export type MediaStatsMaxOrderByAggregateInput = {
    id?: SortOrder
    instanceName?: SortOrder
    date?: SortOrder
    text?: SortOrder
    image?: SortOrder
    video?: SortOrder
    audio?: SortOrder
    sticker?: SortOrder
    reaction?: SortOrder
    isReceived?: SortOrder
    totalDaily?: SortOrder
    totalAllTime?: SortOrder
    totalSent?: SortOrder
    totalReceived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MediaStatsMinOrderByAggregateInput = {
    id?: SortOrder
    instanceName?: SortOrder
    date?: SortOrder
    text?: SortOrder
    image?: SortOrder
    video?: SortOrder
    audio?: SortOrder
    sticker?: SortOrder
    reaction?: SortOrder
    isReceived?: SortOrder
    totalDaily?: SortOrder
    totalAllTime?: SortOrder
    totalSent?: SortOrder
    totalReceived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MediaStatsSumOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    image?: SortOrder
    video?: SortOrder
    audio?: SortOrder
    sticker?: SortOrder
    reaction?: SortOrder
    totalDaily?: SortOrder
    totalAllTime?: SortOrder
    totalSent?: SortOrder
    totalReceived?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type MediaStatsNullableScalarRelationFilter = {
    is?: MediaStatsWhereInput | null
    isNot?: MediaStatsWhereInput | null
  }

  export type InstanceScalarRelationFilter = {
    is?: InstanceWhereInput
    isNot?: InstanceWhereInput
  }

  export type WarmupStatsCountOrderByAggregateInput = {
    id?: SortOrder
    instanceName?: SortOrder
    status?: SortOrder
    messagesSent?: SortOrder
    messagesReceived?: SortOrder
    warmupTime?: SortOrder
    lastActive?: SortOrder
    startTime?: SortOrder
    pauseTime?: SortOrder
    progress?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    mediaStatsId?: SortOrder
    mediaReceivedId?: SortOrder
  }

  export type WarmupStatsAvgOrderByAggregateInput = {
    id?: SortOrder
    messagesSent?: SortOrder
    messagesReceived?: SortOrder
    warmupTime?: SortOrder
    progress?: SortOrder
    userId?: SortOrder
    mediaStatsId?: SortOrder
    mediaReceivedId?: SortOrder
  }

  export type WarmupStatsMaxOrderByAggregateInput = {
    id?: SortOrder
    instanceName?: SortOrder
    status?: SortOrder
    messagesSent?: SortOrder
    messagesReceived?: SortOrder
    warmupTime?: SortOrder
    lastActive?: SortOrder
    startTime?: SortOrder
    pauseTime?: SortOrder
    progress?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    mediaStatsId?: SortOrder
    mediaReceivedId?: SortOrder
  }

  export type WarmupStatsMinOrderByAggregateInput = {
    id?: SortOrder
    instanceName?: SortOrder
    status?: SortOrder
    messagesSent?: SortOrder
    messagesReceived?: SortOrder
    warmupTime?: SortOrder
    lastActive?: SortOrder
    startTime?: SortOrder
    pauseTime?: SortOrder
    progress?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    mediaStatsId?: SortOrder
    mediaReceivedId?: SortOrder
  }

  export type WarmupStatsSumOrderByAggregateInput = {
    id?: SortOrder
    messagesSent?: SortOrder
    messagesReceived?: SortOrder
    warmupTime?: SortOrder
    progress?: SortOrder
    userId?: SortOrder
    mediaStatsId?: SortOrder
    mediaReceivedId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type InstanceCreateNestedManyWithoutUserInput = {
    create?: XOR<InstanceCreateWithoutUserInput, InstanceUncheckedCreateWithoutUserInput> | InstanceCreateWithoutUserInput[] | InstanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InstanceCreateOrConnectWithoutUserInput | InstanceCreateOrConnectWithoutUserInput[]
    createMany?: InstanceCreateManyUserInputEnvelope
    connect?: InstanceWhereUniqueInput | InstanceWhereUniqueInput[]
  }

  export type WarmupStatsCreateNestedManyWithoutUserInput = {
    create?: XOR<WarmupStatsCreateWithoutUserInput, WarmupStatsUncheckedCreateWithoutUserInput> | WarmupStatsCreateWithoutUserInput[] | WarmupStatsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WarmupStatsCreateOrConnectWithoutUserInput | WarmupStatsCreateOrConnectWithoutUserInput[]
    createMany?: WarmupStatsCreateManyUserInputEnvelope
    connect?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
  }

  export type InstanceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<InstanceCreateWithoutUserInput, InstanceUncheckedCreateWithoutUserInput> | InstanceCreateWithoutUserInput[] | InstanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InstanceCreateOrConnectWithoutUserInput | InstanceCreateOrConnectWithoutUserInput[]
    createMany?: InstanceCreateManyUserInputEnvelope
    connect?: InstanceWhereUniqueInput | InstanceWhereUniqueInput[]
  }

  export type WarmupStatsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WarmupStatsCreateWithoutUserInput, WarmupStatsUncheckedCreateWithoutUserInput> | WarmupStatsCreateWithoutUserInput[] | WarmupStatsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WarmupStatsCreateOrConnectWithoutUserInput | WarmupStatsCreateOrConnectWithoutUserInput[]
    createMany?: WarmupStatsCreateManyUserInputEnvelope
    connect?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type InstanceUpdateManyWithoutUserNestedInput = {
    create?: XOR<InstanceCreateWithoutUserInput, InstanceUncheckedCreateWithoutUserInput> | InstanceCreateWithoutUserInput[] | InstanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InstanceCreateOrConnectWithoutUserInput | InstanceCreateOrConnectWithoutUserInput[]
    upsert?: InstanceUpsertWithWhereUniqueWithoutUserInput | InstanceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InstanceCreateManyUserInputEnvelope
    set?: InstanceWhereUniqueInput | InstanceWhereUniqueInput[]
    disconnect?: InstanceWhereUniqueInput | InstanceWhereUniqueInput[]
    delete?: InstanceWhereUniqueInput | InstanceWhereUniqueInput[]
    connect?: InstanceWhereUniqueInput | InstanceWhereUniqueInput[]
    update?: InstanceUpdateWithWhereUniqueWithoutUserInput | InstanceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InstanceUpdateManyWithWhereWithoutUserInput | InstanceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InstanceScalarWhereInput | InstanceScalarWhereInput[]
  }

  export type WarmupStatsUpdateManyWithoutUserNestedInput = {
    create?: XOR<WarmupStatsCreateWithoutUserInput, WarmupStatsUncheckedCreateWithoutUserInput> | WarmupStatsCreateWithoutUserInput[] | WarmupStatsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WarmupStatsCreateOrConnectWithoutUserInput | WarmupStatsCreateOrConnectWithoutUserInput[]
    upsert?: WarmupStatsUpsertWithWhereUniqueWithoutUserInput | WarmupStatsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WarmupStatsCreateManyUserInputEnvelope
    set?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    disconnect?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    delete?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    connect?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    update?: WarmupStatsUpdateWithWhereUniqueWithoutUserInput | WarmupStatsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WarmupStatsUpdateManyWithWhereWithoutUserInput | WarmupStatsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WarmupStatsScalarWhereInput | WarmupStatsScalarWhereInput[]
  }

  export type InstanceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<InstanceCreateWithoutUserInput, InstanceUncheckedCreateWithoutUserInput> | InstanceCreateWithoutUserInput[] | InstanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InstanceCreateOrConnectWithoutUserInput | InstanceCreateOrConnectWithoutUserInput[]
    upsert?: InstanceUpsertWithWhereUniqueWithoutUserInput | InstanceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InstanceCreateManyUserInputEnvelope
    set?: InstanceWhereUniqueInput | InstanceWhereUniqueInput[]
    disconnect?: InstanceWhereUniqueInput | InstanceWhereUniqueInput[]
    delete?: InstanceWhereUniqueInput | InstanceWhereUniqueInput[]
    connect?: InstanceWhereUniqueInput | InstanceWhereUniqueInput[]
    update?: InstanceUpdateWithWhereUniqueWithoutUserInput | InstanceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InstanceUpdateManyWithWhereWithoutUserInput | InstanceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InstanceScalarWhereInput | InstanceScalarWhereInput[]
  }

  export type WarmupStatsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WarmupStatsCreateWithoutUserInput, WarmupStatsUncheckedCreateWithoutUserInput> | WarmupStatsCreateWithoutUserInput[] | WarmupStatsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WarmupStatsCreateOrConnectWithoutUserInput | WarmupStatsCreateOrConnectWithoutUserInput[]
    upsert?: WarmupStatsUpsertWithWhereUniqueWithoutUserInput | WarmupStatsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WarmupStatsCreateManyUserInputEnvelope
    set?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    disconnect?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    delete?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    connect?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    update?: WarmupStatsUpdateWithWhereUniqueWithoutUserInput | WarmupStatsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WarmupStatsUpdateManyWithWhereWithoutUserInput | WarmupStatsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WarmupStatsScalarWhereInput | WarmupStatsScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutInstancesInput = {
    create?: XOR<UserCreateWithoutInstancesInput, UserUncheckedCreateWithoutInstancesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInstancesInput
    connect?: UserWhereUniqueInput
  }

  export type WarmupStatsCreateNestedOneWithoutInstanceInput = {
    create?: XOR<WarmupStatsCreateWithoutInstanceInput, WarmupStatsUncheckedCreateWithoutInstanceInput>
    connectOrCreate?: WarmupStatsCreateOrConnectWithoutInstanceInput
    connect?: WarmupStatsWhereUniqueInput
  }

  export type WarmupStatsUncheckedCreateNestedOneWithoutInstanceInput = {
    create?: XOR<WarmupStatsCreateWithoutInstanceInput, WarmupStatsUncheckedCreateWithoutInstanceInput>
    connectOrCreate?: WarmupStatsCreateOrConnectWithoutInstanceInput
    connect?: WarmupStatsWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutInstancesNestedInput = {
    create?: XOR<UserCreateWithoutInstancesInput, UserUncheckedCreateWithoutInstancesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInstancesInput
    upsert?: UserUpsertWithoutInstancesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInstancesInput, UserUpdateWithoutInstancesInput>, UserUncheckedUpdateWithoutInstancesInput>
  }

  export type WarmupStatsUpdateOneWithoutInstanceNestedInput = {
    create?: XOR<WarmupStatsCreateWithoutInstanceInput, WarmupStatsUncheckedCreateWithoutInstanceInput>
    connectOrCreate?: WarmupStatsCreateOrConnectWithoutInstanceInput
    upsert?: WarmupStatsUpsertWithoutInstanceInput
    disconnect?: WarmupStatsWhereInput | boolean
    delete?: WarmupStatsWhereInput | boolean
    connect?: WarmupStatsWhereUniqueInput
    update?: XOR<XOR<WarmupStatsUpdateToOneWithWhereWithoutInstanceInput, WarmupStatsUpdateWithoutInstanceInput>, WarmupStatsUncheckedUpdateWithoutInstanceInput>
  }

  export type WarmupStatsUncheckedUpdateOneWithoutInstanceNestedInput = {
    create?: XOR<WarmupStatsCreateWithoutInstanceInput, WarmupStatsUncheckedCreateWithoutInstanceInput>
    connectOrCreate?: WarmupStatsCreateOrConnectWithoutInstanceInput
    upsert?: WarmupStatsUpsertWithoutInstanceInput
    disconnect?: WarmupStatsWhereInput | boolean
    delete?: WarmupStatsWhereInput | boolean
    connect?: WarmupStatsWhereUniqueInput
    update?: XOR<XOR<WarmupStatsUpdateToOneWithWhereWithoutInstanceInput, WarmupStatsUpdateWithoutInstanceInput>, WarmupStatsUncheckedUpdateWithoutInstanceInput>
  }

  export type WarmupStatsCreateNestedManyWithoutMediaStatsInput = {
    create?: XOR<WarmupStatsCreateWithoutMediaStatsInput, WarmupStatsUncheckedCreateWithoutMediaStatsInput> | WarmupStatsCreateWithoutMediaStatsInput[] | WarmupStatsUncheckedCreateWithoutMediaStatsInput[]
    connectOrCreate?: WarmupStatsCreateOrConnectWithoutMediaStatsInput | WarmupStatsCreateOrConnectWithoutMediaStatsInput[]
    createMany?: WarmupStatsCreateManyMediaStatsInputEnvelope
    connect?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
  }

  export type WarmupStatsCreateNestedManyWithoutMediaReceivedInput = {
    create?: XOR<WarmupStatsCreateWithoutMediaReceivedInput, WarmupStatsUncheckedCreateWithoutMediaReceivedInput> | WarmupStatsCreateWithoutMediaReceivedInput[] | WarmupStatsUncheckedCreateWithoutMediaReceivedInput[]
    connectOrCreate?: WarmupStatsCreateOrConnectWithoutMediaReceivedInput | WarmupStatsCreateOrConnectWithoutMediaReceivedInput[]
    createMany?: WarmupStatsCreateManyMediaReceivedInputEnvelope
    connect?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
  }

  export type WarmupStatsUncheckedCreateNestedManyWithoutMediaStatsInput = {
    create?: XOR<WarmupStatsCreateWithoutMediaStatsInput, WarmupStatsUncheckedCreateWithoutMediaStatsInput> | WarmupStatsCreateWithoutMediaStatsInput[] | WarmupStatsUncheckedCreateWithoutMediaStatsInput[]
    connectOrCreate?: WarmupStatsCreateOrConnectWithoutMediaStatsInput | WarmupStatsCreateOrConnectWithoutMediaStatsInput[]
    createMany?: WarmupStatsCreateManyMediaStatsInputEnvelope
    connect?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
  }

  export type WarmupStatsUncheckedCreateNestedManyWithoutMediaReceivedInput = {
    create?: XOR<WarmupStatsCreateWithoutMediaReceivedInput, WarmupStatsUncheckedCreateWithoutMediaReceivedInput> | WarmupStatsCreateWithoutMediaReceivedInput[] | WarmupStatsUncheckedCreateWithoutMediaReceivedInput[]
    connectOrCreate?: WarmupStatsCreateOrConnectWithoutMediaReceivedInput | WarmupStatsCreateOrConnectWithoutMediaReceivedInput[]
    createMany?: WarmupStatsCreateManyMediaReceivedInputEnvelope
    connect?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
  }

  export type WarmupStatsUpdateManyWithoutMediaStatsNestedInput = {
    create?: XOR<WarmupStatsCreateWithoutMediaStatsInput, WarmupStatsUncheckedCreateWithoutMediaStatsInput> | WarmupStatsCreateWithoutMediaStatsInput[] | WarmupStatsUncheckedCreateWithoutMediaStatsInput[]
    connectOrCreate?: WarmupStatsCreateOrConnectWithoutMediaStatsInput | WarmupStatsCreateOrConnectWithoutMediaStatsInput[]
    upsert?: WarmupStatsUpsertWithWhereUniqueWithoutMediaStatsInput | WarmupStatsUpsertWithWhereUniqueWithoutMediaStatsInput[]
    createMany?: WarmupStatsCreateManyMediaStatsInputEnvelope
    set?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    disconnect?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    delete?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    connect?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    update?: WarmupStatsUpdateWithWhereUniqueWithoutMediaStatsInput | WarmupStatsUpdateWithWhereUniqueWithoutMediaStatsInput[]
    updateMany?: WarmupStatsUpdateManyWithWhereWithoutMediaStatsInput | WarmupStatsUpdateManyWithWhereWithoutMediaStatsInput[]
    deleteMany?: WarmupStatsScalarWhereInput | WarmupStatsScalarWhereInput[]
  }

  export type WarmupStatsUpdateManyWithoutMediaReceivedNestedInput = {
    create?: XOR<WarmupStatsCreateWithoutMediaReceivedInput, WarmupStatsUncheckedCreateWithoutMediaReceivedInput> | WarmupStatsCreateWithoutMediaReceivedInput[] | WarmupStatsUncheckedCreateWithoutMediaReceivedInput[]
    connectOrCreate?: WarmupStatsCreateOrConnectWithoutMediaReceivedInput | WarmupStatsCreateOrConnectWithoutMediaReceivedInput[]
    upsert?: WarmupStatsUpsertWithWhereUniqueWithoutMediaReceivedInput | WarmupStatsUpsertWithWhereUniqueWithoutMediaReceivedInput[]
    createMany?: WarmupStatsCreateManyMediaReceivedInputEnvelope
    set?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    disconnect?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    delete?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    connect?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    update?: WarmupStatsUpdateWithWhereUniqueWithoutMediaReceivedInput | WarmupStatsUpdateWithWhereUniqueWithoutMediaReceivedInput[]
    updateMany?: WarmupStatsUpdateManyWithWhereWithoutMediaReceivedInput | WarmupStatsUpdateManyWithWhereWithoutMediaReceivedInput[]
    deleteMany?: WarmupStatsScalarWhereInput | WarmupStatsScalarWhereInput[]
  }

  export type WarmupStatsUncheckedUpdateManyWithoutMediaStatsNestedInput = {
    create?: XOR<WarmupStatsCreateWithoutMediaStatsInput, WarmupStatsUncheckedCreateWithoutMediaStatsInput> | WarmupStatsCreateWithoutMediaStatsInput[] | WarmupStatsUncheckedCreateWithoutMediaStatsInput[]
    connectOrCreate?: WarmupStatsCreateOrConnectWithoutMediaStatsInput | WarmupStatsCreateOrConnectWithoutMediaStatsInput[]
    upsert?: WarmupStatsUpsertWithWhereUniqueWithoutMediaStatsInput | WarmupStatsUpsertWithWhereUniqueWithoutMediaStatsInput[]
    createMany?: WarmupStatsCreateManyMediaStatsInputEnvelope
    set?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    disconnect?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    delete?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    connect?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    update?: WarmupStatsUpdateWithWhereUniqueWithoutMediaStatsInput | WarmupStatsUpdateWithWhereUniqueWithoutMediaStatsInput[]
    updateMany?: WarmupStatsUpdateManyWithWhereWithoutMediaStatsInput | WarmupStatsUpdateManyWithWhereWithoutMediaStatsInput[]
    deleteMany?: WarmupStatsScalarWhereInput | WarmupStatsScalarWhereInput[]
  }

  export type WarmupStatsUncheckedUpdateManyWithoutMediaReceivedNestedInput = {
    create?: XOR<WarmupStatsCreateWithoutMediaReceivedInput, WarmupStatsUncheckedCreateWithoutMediaReceivedInput> | WarmupStatsCreateWithoutMediaReceivedInput[] | WarmupStatsUncheckedCreateWithoutMediaReceivedInput[]
    connectOrCreate?: WarmupStatsCreateOrConnectWithoutMediaReceivedInput | WarmupStatsCreateOrConnectWithoutMediaReceivedInput[]
    upsert?: WarmupStatsUpsertWithWhereUniqueWithoutMediaReceivedInput | WarmupStatsUpsertWithWhereUniqueWithoutMediaReceivedInput[]
    createMany?: WarmupStatsCreateManyMediaReceivedInputEnvelope
    set?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    disconnect?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    delete?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    connect?: WarmupStatsWhereUniqueInput | WarmupStatsWhereUniqueInput[]
    update?: WarmupStatsUpdateWithWhereUniqueWithoutMediaReceivedInput | WarmupStatsUpdateWithWhereUniqueWithoutMediaReceivedInput[]
    updateMany?: WarmupStatsUpdateManyWithWhereWithoutMediaReceivedInput | WarmupStatsUpdateManyWithWhereWithoutMediaReceivedInput[]
    deleteMany?: WarmupStatsScalarWhereInput | WarmupStatsScalarWhereInput[]
  }

  export type MediaStatsCreateNestedOneWithoutWarmupStatsSentInput = {
    create?: XOR<MediaStatsCreateWithoutWarmupStatsSentInput, MediaStatsUncheckedCreateWithoutWarmupStatsSentInput>
    connectOrCreate?: MediaStatsCreateOrConnectWithoutWarmupStatsSentInput
    connect?: MediaStatsWhereUniqueInput
  }

  export type MediaStatsCreateNestedOneWithoutWarmupStatsReceivedInput = {
    create?: XOR<MediaStatsCreateWithoutWarmupStatsReceivedInput, MediaStatsUncheckedCreateWithoutWarmupStatsReceivedInput>
    connectOrCreate?: MediaStatsCreateOrConnectWithoutWarmupStatsReceivedInput
    connect?: MediaStatsWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWarmupStatsInput = {
    create?: XOR<UserCreateWithoutWarmupStatsInput, UserUncheckedCreateWithoutWarmupStatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWarmupStatsInput
    connect?: UserWhereUniqueInput
  }

  export type InstanceCreateNestedOneWithoutWarmupStatsInput = {
    create?: XOR<InstanceCreateWithoutWarmupStatsInput, InstanceUncheckedCreateWithoutWarmupStatsInput>
    connectOrCreate?: InstanceCreateOrConnectWithoutWarmupStatsInput
    connect?: InstanceWhereUniqueInput
  }

  export type MediaStatsUpdateOneWithoutWarmupStatsSentNestedInput = {
    create?: XOR<MediaStatsCreateWithoutWarmupStatsSentInput, MediaStatsUncheckedCreateWithoutWarmupStatsSentInput>
    connectOrCreate?: MediaStatsCreateOrConnectWithoutWarmupStatsSentInput
    upsert?: MediaStatsUpsertWithoutWarmupStatsSentInput
    disconnect?: MediaStatsWhereInput | boolean
    delete?: MediaStatsWhereInput | boolean
    connect?: MediaStatsWhereUniqueInput
    update?: XOR<XOR<MediaStatsUpdateToOneWithWhereWithoutWarmupStatsSentInput, MediaStatsUpdateWithoutWarmupStatsSentInput>, MediaStatsUncheckedUpdateWithoutWarmupStatsSentInput>
  }

  export type MediaStatsUpdateOneWithoutWarmupStatsReceivedNestedInput = {
    create?: XOR<MediaStatsCreateWithoutWarmupStatsReceivedInput, MediaStatsUncheckedCreateWithoutWarmupStatsReceivedInput>
    connectOrCreate?: MediaStatsCreateOrConnectWithoutWarmupStatsReceivedInput
    upsert?: MediaStatsUpsertWithoutWarmupStatsReceivedInput
    disconnect?: MediaStatsWhereInput | boolean
    delete?: MediaStatsWhereInput | boolean
    connect?: MediaStatsWhereUniqueInput
    update?: XOR<XOR<MediaStatsUpdateToOneWithWhereWithoutWarmupStatsReceivedInput, MediaStatsUpdateWithoutWarmupStatsReceivedInput>, MediaStatsUncheckedUpdateWithoutWarmupStatsReceivedInput>
  }

  export type UserUpdateOneRequiredWithoutWarmupStatsNestedInput = {
    create?: XOR<UserCreateWithoutWarmupStatsInput, UserUncheckedCreateWithoutWarmupStatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWarmupStatsInput
    upsert?: UserUpsertWithoutWarmupStatsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWarmupStatsInput, UserUpdateWithoutWarmupStatsInput>, UserUncheckedUpdateWithoutWarmupStatsInput>
  }

  export type InstanceUpdateOneRequiredWithoutWarmupStatsNestedInput = {
    create?: XOR<InstanceCreateWithoutWarmupStatsInput, InstanceUncheckedCreateWithoutWarmupStatsInput>
    connectOrCreate?: InstanceCreateOrConnectWithoutWarmupStatsInput
    upsert?: InstanceUpsertWithoutWarmupStatsInput
    connect?: InstanceWhereUniqueInput
    update?: XOR<XOR<InstanceUpdateToOneWithWhereWithoutWarmupStatsInput, InstanceUpdateWithoutWarmupStatsInput>, InstanceUncheckedUpdateWithoutWarmupStatsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type InstanceCreateWithoutUserInput = {
    instanceName: string
    connectionStatus?: string
    number?: string | null
    ownerJid?: string | null
    profilePicUrl?: string | null
    integration?: string
    token?: string | null
    clientName?: string | null
    profileName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    disconnectedAt?: Date | string | null
    disconnectionObject?: NullableJsonNullValueInput | InputJsonValue
    disconnectionReasonCode?: string | null
    typebot?: NullableJsonNullValueInput | InputJsonValue
    warmupStats?: WarmupStatsCreateNestedOneWithoutInstanceInput
  }

  export type InstanceUncheckedCreateWithoutUserInput = {
    id?: number
    instanceName: string
    connectionStatus?: string
    number?: string | null
    ownerJid?: string | null
    profilePicUrl?: string | null
    integration?: string
    token?: string | null
    clientName?: string | null
    profileName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    disconnectedAt?: Date | string | null
    disconnectionObject?: NullableJsonNullValueInput | InputJsonValue
    disconnectionReasonCode?: string | null
    typebot?: NullableJsonNullValueInput | InputJsonValue
    warmupStats?: WarmupStatsUncheckedCreateNestedOneWithoutInstanceInput
  }

  export type InstanceCreateOrConnectWithoutUserInput = {
    where: InstanceWhereUniqueInput
    create: XOR<InstanceCreateWithoutUserInput, InstanceUncheckedCreateWithoutUserInput>
  }

  export type InstanceCreateManyUserInputEnvelope = {
    data: InstanceCreateManyUserInput | InstanceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WarmupStatsCreateWithoutUserInput = {
    status?: string
    messagesSent?: number
    messagesReceived?: number
    warmupTime?: number
    lastActive?: Date | string
    startTime?: Date | string | null
    pauseTime?: Date | string | null
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    mediaStats?: MediaStatsCreateNestedOneWithoutWarmupStatsSentInput
    mediaReceived?: MediaStatsCreateNestedOneWithoutWarmupStatsReceivedInput
    instance: InstanceCreateNestedOneWithoutWarmupStatsInput
  }

  export type WarmupStatsUncheckedCreateWithoutUserInput = {
    id?: number
    instanceName: string
    status?: string
    messagesSent?: number
    messagesReceived?: number
    warmupTime?: number
    lastActive?: Date | string
    startTime?: Date | string | null
    pauseTime?: Date | string | null
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    mediaStatsId?: number | null
    mediaReceivedId?: number | null
  }

  export type WarmupStatsCreateOrConnectWithoutUserInput = {
    where: WarmupStatsWhereUniqueInput
    create: XOR<WarmupStatsCreateWithoutUserInput, WarmupStatsUncheckedCreateWithoutUserInput>
  }

  export type WarmupStatsCreateManyUserInputEnvelope = {
    data: WarmupStatsCreateManyUserInput | WarmupStatsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type InstanceUpsertWithWhereUniqueWithoutUserInput = {
    where: InstanceWhereUniqueInput
    update: XOR<InstanceUpdateWithoutUserInput, InstanceUncheckedUpdateWithoutUserInput>
    create: XOR<InstanceCreateWithoutUserInput, InstanceUncheckedCreateWithoutUserInput>
  }

  export type InstanceUpdateWithWhereUniqueWithoutUserInput = {
    where: InstanceWhereUniqueInput
    data: XOR<InstanceUpdateWithoutUserInput, InstanceUncheckedUpdateWithoutUserInput>
  }

  export type InstanceUpdateManyWithWhereWithoutUserInput = {
    where: InstanceScalarWhereInput
    data: XOR<InstanceUpdateManyMutationInput, InstanceUncheckedUpdateManyWithoutUserInput>
  }

  export type InstanceScalarWhereInput = {
    AND?: InstanceScalarWhereInput | InstanceScalarWhereInput[]
    OR?: InstanceScalarWhereInput[]
    NOT?: InstanceScalarWhereInput | InstanceScalarWhereInput[]
    id?: IntFilter<"Instance"> | number
    instanceName?: StringFilter<"Instance"> | string
    connectionStatus?: StringFilter<"Instance"> | string
    number?: StringNullableFilter<"Instance"> | string | null
    ownerJid?: StringNullableFilter<"Instance"> | string | null
    profilePicUrl?: StringNullableFilter<"Instance"> | string | null
    integration?: StringFilter<"Instance"> | string
    token?: StringNullableFilter<"Instance"> | string | null
    clientName?: StringNullableFilter<"Instance"> | string | null
    profileName?: StringNullableFilter<"Instance"> | string | null
    userId?: IntFilter<"Instance"> | number
    createdAt?: DateTimeFilter<"Instance"> | Date | string
    updatedAt?: DateTimeFilter<"Instance"> | Date | string
    disconnectedAt?: DateTimeNullableFilter<"Instance"> | Date | string | null
    disconnectionObject?: JsonNullableFilter<"Instance">
    disconnectionReasonCode?: StringNullableFilter<"Instance"> | string | null
    typebot?: JsonNullableFilter<"Instance">
  }

  export type WarmupStatsUpsertWithWhereUniqueWithoutUserInput = {
    where: WarmupStatsWhereUniqueInput
    update: XOR<WarmupStatsUpdateWithoutUserInput, WarmupStatsUncheckedUpdateWithoutUserInput>
    create: XOR<WarmupStatsCreateWithoutUserInput, WarmupStatsUncheckedCreateWithoutUserInput>
  }

  export type WarmupStatsUpdateWithWhereUniqueWithoutUserInput = {
    where: WarmupStatsWhereUniqueInput
    data: XOR<WarmupStatsUpdateWithoutUserInput, WarmupStatsUncheckedUpdateWithoutUserInput>
  }

  export type WarmupStatsUpdateManyWithWhereWithoutUserInput = {
    where: WarmupStatsScalarWhereInput
    data: XOR<WarmupStatsUpdateManyMutationInput, WarmupStatsUncheckedUpdateManyWithoutUserInput>
  }

  export type WarmupStatsScalarWhereInput = {
    AND?: WarmupStatsScalarWhereInput | WarmupStatsScalarWhereInput[]
    OR?: WarmupStatsScalarWhereInput[]
    NOT?: WarmupStatsScalarWhereInput | WarmupStatsScalarWhereInput[]
    id?: IntFilter<"WarmupStats"> | number
    instanceName?: StringFilter<"WarmupStats"> | string
    status?: StringFilter<"WarmupStats"> | string
    messagesSent?: IntFilter<"WarmupStats"> | number
    messagesReceived?: IntFilter<"WarmupStats"> | number
    warmupTime?: IntFilter<"WarmupStats"> | number
    lastActive?: DateTimeFilter<"WarmupStats"> | Date | string
    startTime?: DateTimeNullableFilter<"WarmupStats"> | Date | string | null
    pauseTime?: DateTimeNullableFilter<"WarmupStats"> | Date | string | null
    progress?: IntFilter<"WarmupStats"> | number
    userId?: IntFilter<"WarmupStats"> | number
    createdAt?: DateTimeFilter<"WarmupStats"> | Date | string
    updatedAt?: DateTimeFilter<"WarmupStats"> | Date | string
    mediaStatsId?: IntNullableFilter<"WarmupStats"> | number | null
    mediaReceivedId?: IntNullableFilter<"WarmupStats"> | number | null
  }

  export type UserCreateWithoutInstancesInput = {
    name: string
    email: string
    password: string
    plan?: string
    status?: boolean
    maxInstances?: number
    trialEndDate?: Date | string | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    warmupStats?: WarmupStatsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInstancesInput = {
    id?: number
    name: string
    email: string
    password: string
    plan?: string
    status?: boolean
    maxInstances?: number
    trialEndDate?: Date | string | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    warmupStats?: WarmupStatsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInstancesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInstancesInput, UserUncheckedCreateWithoutInstancesInput>
  }

  export type WarmupStatsCreateWithoutInstanceInput = {
    status?: string
    messagesSent?: number
    messagesReceived?: number
    warmupTime?: number
    lastActive?: Date | string
    startTime?: Date | string | null
    pauseTime?: Date | string | null
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    mediaStats?: MediaStatsCreateNestedOneWithoutWarmupStatsSentInput
    mediaReceived?: MediaStatsCreateNestedOneWithoutWarmupStatsReceivedInput
    user: UserCreateNestedOneWithoutWarmupStatsInput
  }

  export type WarmupStatsUncheckedCreateWithoutInstanceInput = {
    id?: number
    status?: string
    messagesSent?: number
    messagesReceived?: number
    warmupTime?: number
    lastActive?: Date | string
    startTime?: Date | string | null
    pauseTime?: Date | string | null
    progress?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    mediaStatsId?: number | null
    mediaReceivedId?: number | null
  }

  export type WarmupStatsCreateOrConnectWithoutInstanceInput = {
    where: WarmupStatsWhereUniqueInput
    create: XOR<WarmupStatsCreateWithoutInstanceInput, WarmupStatsUncheckedCreateWithoutInstanceInput>
  }

  export type UserUpsertWithoutInstancesInput = {
    update: XOR<UserUpdateWithoutInstancesInput, UserUncheckedUpdateWithoutInstancesInput>
    create: XOR<UserCreateWithoutInstancesInput, UserUncheckedCreateWithoutInstancesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInstancesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInstancesInput, UserUncheckedUpdateWithoutInstancesInput>
  }

  export type UserUpdateWithoutInstancesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    maxInstances?: IntFieldUpdateOperationsInput | number
    trialEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warmupStats?: WarmupStatsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInstancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    maxInstances?: IntFieldUpdateOperationsInput | number
    trialEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warmupStats?: WarmupStatsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WarmupStatsUpsertWithoutInstanceInput = {
    update: XOR<WarmupStatsUpdateWithoutInstanceInput, WarmupStatsUncheckedUpdateWithoutInstanceInput>
    create: XOR<WarmupStatsCreateWithoutInstanceInput, WarmupStatsUncheckedCreateWithoutInstanceInput>
    where?: WarmupStatsWhereInput
  }

  export type WarmupStatsUpdateToOneWithWhereWithoutInstanceInput = {
    where?: WarmupStatsWhereInput
    data: XOR<WarmupStatsUpdateWithoutInstanceInput, WarmupStatsUncheckedUpdateWithoutInstanceInput>
  }

  export type WarmupStatsUpdateWithoutInstanceInput = {
    status?: StringFieldUpdateOperationsInput | string
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    warmupTime?: IntFieldUpdateOperationsInput | number
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pauseTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaStats?: MediaStatsUpdateOneWithoutWarmupStatsSentNestedInput
    mediaReceived?: MediaStatsUpdateOneWithoutWarmupStatsReceivedNestedInput
    user?: UserUpdateOneRequiredWithoutWarmupStatsNestedInput
  }

  export type WarmupStatsUncheckedUpdateWithoutInstanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    warmupTime?: IntFieldUpdateOperationsInput | number
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pauseTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaStatsId?: NullableIntFieldUpdateOperationsInput | number | null
    mediaReceivedId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WarmupStatsCreateWithoutMediaStatsInput = {
    status?: string
    messagesSent?: number
    messagesReceived?: number
    warmupTime?: number
    lastActive?: Date | string
    startTime?: Date | string | null
    pauseTime?: Date | string | null
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    mediaReceived?: MediaStatsCreateNestedOneWithoutWarmupStatsReceivedInput
    user: UserCreateNestedOneWithoutWarmupStatsInput
    instance: InstanceCreateNestedOneWithoutWarmupStatsInput
  }

  export type WarmupStatsUncheckedCreateWithoutMediaStatsInput = {
    id?: number
    instanceName: string
    status?: string
    messagesSent?: number
    messagesReceived?: number
    warmupTime?: number
    lastActive?: Date | string
    startTime?: Date | string | null
    pauseTime?: Date | string | null
    progress?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    mediaReceivedId?: number | null
  }

  export type WarmupStatsCreateOrConnectWithoutMediaStatsInput = {
    where: WarmupStatsWhereUniqueInput
    create: XOR<WarmupStatsCreateWithoutMediaStatsInput, WarmupStatsUncheckedCreateWithoutMediaStatsInput>
  }

  export type WarmupStatsCreateManyMediaStatsInputEnvelope = {
    data: WarmupStatsCreateManyMediaStatsInput | WarmupStatsCreateManyMediaStatsInput[]
    skipDuplicates?: boolean
  }

  export type WarmupStatsCreateWithoutMediaReceivedInput = {
    status?: string
    messagesSent?: number
    messagesReceived?: number
    warmupTime?: number
    lastActive?: Date | string
    startTime?: Date | string | null
    pauseTime?: Date | string | null
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    mediaStats?: MediaStatsCreateNestedOneWithoutWarmupStatsSentInput
    user: UserCreateNestedOneWithoutWarmupStatsInput
    instance: InstanceCreateNestedOneWithoutWarmupStatsInput
  }

  export type WarmupStatsUncheckedCreateWithoutMediaReceivedInput = {
    id?: number
    instanceName: string
    status?: string
    messagesSent?: number
    messagesReceived?: number
    warmupTime?: number
    lastActive?: Date | string
    startTime?: Date | string | null
    pauseTime?: Date | string | null
    progress?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    mediaStatsId?: number | null
  }

  export type WarmupStatsCreateOrConnectWithoutMediaReceivedInput = {
    where: WarmupStatsWhereUniqueInput
    create: XOR<WarmupStatsCreateWithoutMediaReceivedInput, WarmupStatsUncheckedCreateWithoutMediaReceivedInput>
  }

  export type WarmupStatsCreateManyMediaReceivedInputEnvelope = {
    data: WarmupStatsCreateManyMediaReceivedInput | WarmupStatsCreateManyMediaReceivedInput[]
    skipDuplicates?: boolean
  }

  export type WarmupStatsUpsertWithWhereUniqueWithoutMediaStatsInput = {
    where: WarmupStatsWhereUniqueInput
    update: XOR<WarmupStatsUpdateWithoutMediaStatsInput, WarmupStatsUncheckedUpdateWithoutMediaStatsInput>
    create: XOR<WarmupStatsCreateWithoutMediaStatsInput, WarmupStatsUncheckedCreateWithoutMediaStatsInput>
  }

  export type WarmupStatsUpdateWithWhereUniqueWithoutMediaStatsInput = {
    where: WarmupStatsWhereUniqueInput
    data: XOR<WarmupStatsUpdateWithoutMediaStatsInput, WarmupStatsUncheckedUpdateWithoutMediaStatsInput>
  }

  export type WarmupStatsUpdateManyWithWhereWithoutMediaStatsInput = {
    where: WarmupStatsScalarWhereInput
    data: XOR<WarmupStatsUpdateManyMutationInput, WarmupStatsUncheckedUpdateManyWithoutMediaStatsInput>
  }

  export type WarmupStatsUpsertWithWhereUniqueWithoutMediaReceivedInput = {
    where: WarmupStatsWhereUniqueInput
    update: XOR<WarmupStatsUpdateWithoutMediaReceivedInput, WarmupStatsUncheckedUpdateWithoutMediaReceivedInput>
    create: XOR<WarmupStatsCreateWithoutMediaReceivedInput, WarmupStatsUncheckedCreateWithoutMediaReceivedInput>
  }

  export type WarmupStatsUpdateWithWhereUniqueWithoutMediaReceivedInput = {
    where: WarmupStatsWhereUniqueInput
    data: XOR<WarmupStatsUpdateWithoutMediaReceivedInput, WarmupStatsUncheckedUpdateWithoutMediaReceivedInput>
  }

  export type WarmupStatsUpdateManyWithWhereWithoutMediaReceivedInput = {
    where: WarmupStatsScalarWhereInput
    data: XOR<WarmupStatsUpdateManyMutationInput, WarmupStatsUncheckedUpdateManyWithoutMediaReceivedInput>
  }

  export type MediaStatsCreateWithoutWarmupStatsSentInput = {
    instanceName: string
    date?: Date | string
    text?: number
    image?: number
    video?: number
    audio?: number
    sticker?: number
    reaction?: number
    isReceived?: boolean
    totalDaily?: number
    totalAllTime?: number
    totalSent?: number
    totalReceived?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warmupStatsReceived?: WarmupStatsCreateNestedManyWithoutMediaReceivedInput
  }

  export type MediaStatsUncheckedCreateWithoutWarmupStatsSentInput = {
    id?: number
    instanceName: string
    date?: Date | string
    text?: number
    image?: number
    video?: number
    audio?: number
    sticker?: number
    reaction?: number
    isReceived?: boolean
    totalDaily?: number
    totalAllTime?: number
    totalSent?: number
    totalReceived?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warmupStatsReceived?: WarmupStatsUncheckedCreateNestedManyWithoutMediaReceivedInput
  }

  export type MediaStatsCreateOrConnectWithoutWarmupStatsSentInput = {
    where: MediaStatsWhereUniqueInput
    create: XOR<MediaStatsCreateWithoutWarmupStatsSentInput, MediaStatsUncheckedCreateWithoutWarmupStatsSentInput>
  }

  export type MediaStatsCreateWithoutWarmupStatsReceivedInput = {
    instanceName: string
    date?: Date | string
    text?: number
    image?: number
    video?: number
    audio?: number
    sticker?: number
    reaction?: number
    isReceived?: boolean
    totalDaily?: number
    totalAllTime?: number
    totalSent?: number
    totalReceived?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warmupStatsSent?: WarmupStatsCreateNestedManyWithoutMediaStatsInput
  }

  export type MediaStatsUncheckedCreateWithoutWarmupStatsReceivedInput = {
    id?: number
    instanceName: string
    date?: Date | string
    text?: number
    image?: number
    video?: number
    audio?: number
    sticker?: number
    reaction?: number
    isReceived?: boolean
    totalDaily?: number
    totalAllTime?: number
    totalSent?: number
    totalReceived?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warmupStatsSent?: WarmupStatsUncheckedCreateNestedManyWithoutMediaStatsInput
  }

  export type MediaStatsCreateOrConnectWithoutWarmupStatsReceivedInput = {
    where: MediaStatsWhereUniqueInput
    create: XOR<MediaStatsCreateWithoutWarmupStatsReceivedInput, MediaStatsUncheckedCreateWithoutWarmupStatsReceivedInput>
  }

  export type UserCreateWithoutWarmupStatsInput = {
    name: string
    email: string
    password: string
    plan?: string
    status?: boolean
    maxInstances?: number
    trialEndDate?: Date | string | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    instances?: InstanceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWarmupStatsInput = {
    id?: number
    name: string
    email: string
    password: string
    plan?: string
    status?: boolean
    maxInstances?: number
    trialEndDate?: Date | string | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    instances?: InstanceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWarmupStatsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWarmupStatsInput, UserUncheckedCreateWithoutWarmupStatsInput>
  }

  export type InstanceCreateWithoutWarmupStatsInput = {
    instanceName: string
    connectionStatus?: string
    number?: string | null
    ownerJid?: string | null
    profilePicUrl?: string | null
    integration?: string
    token?: string | null
    clientName?: string | null
    profileName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    disconnectedAt?: Date | string | null
    disconnectionObject?: NullableJsonNullValueInput | InputJsonValue
    disconnectionReasonCode?: string | null
    typebot?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutInstancesInput
  }

  export type InstanceUncheckedCreateWithoutWarmupStatsInput = {
    id?: number
    instanceName: string
    connectionStatus?: string
    number?: string | null
    ownerJid?: string | null
    profilePicUrl?: string | null
    integration?: string
    token?: string | null
    clientName?: string | null
    profileName?: string | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    disconnectedAt?: Date | string | null
    disconnectionObject?: NullableJsonNullValueInput | InputJsonValue
    disconnectionReasonCode?: string | null
    typebot?: NullableJsonNullValueInput | InputJsonValue
  }

  export type InstanceCreateOrConnectWithoutWarmupStatsInput = {
    where: InstanceWhereUniqueInput
    create: XOR<InstanceCreateWithoutWarmupStatsInput, InstanceUncheckedCreateWithoutWarmupStatsInput>
  }

  export type MediaStatsUpsertWithoutWarmupStatsSentInput = {
    update: XOR<MediaStatsUpdateWithoutWarmupStatsSentInput, MediaStatsUncheckedUpdateWithoutWarmupStatsSentInput>
    create: XOR<MediaStatsCreateWithoutWarmupStatsSentInput, MediaStatsUncheckedCreateWithoutWarmupStatsSentInput>
    where?: MediaStatsWhereInput
  }

  export type MediaStatsUpdateToOneWithWhereWithoutWarmupStatsSentInput = {
    where?: MediaStatsWhereInput
    data: XOR<MediaStatsUpdateWithoutWarmupStatsSentInput, MediaStatsUncheckedUpdateWithoutWarmupStatsSentInput>
  }

  export type MediaStatsUpdateWithoutWarmupStatsSentInput = {
    instanceName?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: IntFieldUpdateOperationsInput | number
    image?: IntFieldUpdateOperationsInput | number
    video?: IntFieldUpdateOperationsInput | number
    audio?: IntFieldUpdateOperationsInput | number
    sticker?: IntFieldUpdateOperationsInput | number
    reaction?: IntFieldUpdateOperationsInput | number
    isReceived?: BoolFieldUpdateOperationsInput | boolean
    totalDaily?: IntFieldUpdateOperationsInput | number
    totalAllTime?: IntFieldUpdateOperationsInput | number
    totalSent?: IntFieldUpdateOperationsInput | number
    totalReceived?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warmupStatsReceived?: WarmupStatsUpdateManyWithoutMediaReceivedNestedInput
  }

  export type MediaStatsUncheckedUpdateWithoutWarmupStatsSentInput = {
    id?: IntFieldUpdateOperationsInput | number
    instanceName?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: IntFieldUpdateOperationsInput | number
    image?: IntFieldUpdateOperationsInput | number
    video?: IntFieldUpdateOperationsInput | number
    audio?: IntFieldUpdateOperationsInput | number
    sticker?: IntFieldUpdateOperationsInput | number
    reaction?: IntFieldUpdateOperationsInput | number
    isReceived?: BoolFieldUpdateOperationsInput | boolean
    totalDaily?: IntFieldUpdateOperationsInput | number
    totalAllTime?: IntFieldUpdateOperationsInput | number
    totalSent?: IntFieldUpdateOperationsInput | number
    totalReceived?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warmupStatsReceived?: WarmupStatsUncheckedUpdateManyWithoutMediaReceivedNestedInput
  }

  export type MediaStatsUpsertWithoutWarmupStatsReceivedInput = {
    update: XOR<MediaStatsUpdateWithoutWarmupStatsReceivedInput, MediaStatsUncheckedUpdateWithoutWarmupStatsReceivedInput>
    create: XOR<MediaStatsCreateWithoutWarmupStatsReceivedInput, MediaStatsUncheckedCreateWithoutWarmupStatsReceivedInput>
    where?: MediaStatsWhereInput
  }

  export type MediaStatsUpdateToOneWithWhereWithoutWarmupStatsReceivedInput = {
    where?: MediaStatsWhereInput
    data: XOR<MediaStatsUpdateWithoutWarmupStatsReceivedInput, MediaStatsUncheckedUpdateWithoutWarmupStatsReceivedInput>
  }

  export type MediaStatsUpdateWithoutWarmupStatsReceivedInput = {
    instanceName?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: IntFieldUpdateOperationsInput | number
    image?: IntFieldUpdateOperationsInput | number
    video?: IntFieldUpdateOperationsInput | number
    audio?: IntFieldUpdateOperationsInput | number
    sticker?: IntFieldUpdateOperationsInput | number
    reaction?: IntFieldUpdateOperationsInput | number
    isReceived?: BoolFieldUpdateOperationsInput | boolean
    totalDaily?: IntFieldUpdateOperationsInput | number
    totalAllTime?: IntFieldUpdateOperationsInput | number
    totalSent?: IntFieldUpdateOperationsInput | number
    totalReceived?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warmupStatsSent?: WarmupStatsUpdateManyWithoutMediaStatsNestedInput
  }

  export type MediaStatsUncheckedUpdateWithoutWarmupStatsReceivedInput = {
    id?: IntFieldUpdateOperationsInput | number
    instanceName?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: IntFieldUpdateOperationsInput | number
    image?: IntFieldUpdateOperationsInput | number
    video?: IntFieldUpdateOperationsInput | number
    audio?: IntFieldUpdateOperationsInput | number
    sticker?: IntFieldUpdateOperationsInput | number
    reaction?: IntFieldUpdateOperationsInput | number
    isReceived?: BoolFieldUpdateOperationsInput | boolean
    totalDaily?: IntFieldUpdateOperationsInput | number
    totalAllTime?: IntFieldUpdateOperationsInput | number
    totalSent?: IntFieldUpdateOperationsInput | number
    totalReceived?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warmupStatsSent?: WarmupStatsUncheckedUpdateManyWithoutMediaStatsNestedInput
  }

  export type UserUpsertWithoutWarmupStatsInput = {
    update: XOR<UserUpdateWithoutWarmupStatsInput, UserUncheckedUpdateWithoutWarmupStatsInput>
    create: XOR<UserCreateWithoutWarmupStatsInput, UserUncheckedCreateWithoutWarmupStatsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWarmupStatsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWarmupStatsInput, UserUncheckedUpdateWithoutWarmupStatsInput>
  }

  export type UserUpdateWithoutWarmupStatsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    maxInstances?: IntFieldUpdateOperationsInput | number
    trialEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instances?: InstanceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWarmupStatsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    maxInstances?: IntFieldUpdateOperationsInput | number
    trialEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instances?: InstanceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type InstanceUpsertWithoutWarmupStatsInput = {
    update: XOR<InstanceUpdateWithoutWarmupStatsInput, InstanceUncheckedUpdateWithoutWarmupStatsInput>
    create: XOR<InstanceCreateWithoutWarmupStatsInput, InstanceUncheckedCreateWithoutWarmupStatsInput>
    where?: InstanceWhereInput
  }

  export type InstanceUpdateToOneWithWhereWithoutWarmupStatsInput = {
    where?: InstanceWhereInput
    data: XOR<InstanceUpdateWithoutWarmupStatsInput, InstanceUncheckedUpdateWithoutWarmupStatsInput>
  }

  export type InstanceUpdateWithoutWarmupStatsInput = {
    instanceName?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    number?: NullableStringFieldUpdateOperationsInput | string | null
    ownerJid?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    integration?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    profileName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disconnectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disconnectionObject?: NullableJsonNullValueInput | InputJsonValue
    disconnectionReasonCode?: NullableStringFieldUpdateOperationsInput | string | null
    typebot?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutInstancesNestedInput
  }

  export type InstanceUncheckedUpdateWithoutWarmupStatsInput = {
    id?: IntFieldUpdateOperationsInput | number
    instanceName?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    number?: NullableStringFieldUpdateOperationsInput | string | null
    ownerJid?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    integration?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    profileName?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disconnectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disconnectionObject?: NullableJsonNullValueInput | InputJsonValue
    disconnectionReasonCode?: NullableStringFieldUpdateOperationsInput | string | null
    typebot?: NullableJsonNullValueInput | InputJsonValue
  }

  export type InstanceCreateManyUserInput = {
    id?: number
    instanceName: string
    connectionStatus?: string
    number?: string | null
    ownerJid?: string | null
    profilePicUrl?: string | null
    integration?: string
    token?: string | null
    clientName?: string | null
    profileName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    disconnectedAt?: Date | string | null
    disconnectionObject?: NullableJsonNullValueInput | InputJsonValue
    disconnectionReasonCode?: string | null
    typebot?: NullableJsonNullValueInput | InputJsonValue
  }

  export type WarmupStatsCreateManyUserInput = {
    id?: number
    instanceName: string
    status?: string
    messagesSent?: number
    messagesReceived?: number
    warmupTime?: number
    lastActive?: Date | string
    startTime?: Date | string | null
    pauseTime?: Date | string | null
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    mediaStatsId?: number | null
    mediaReceivedId?: number | null
  }

  export type InstanceUpdateWithoutUserInput = {
    instanceName?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    number?: NullableStringFieldUpdateOperationsInput | string | null
    ownerJid?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    integration?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    profileName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disconnectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disconnectionObject?: NullableJsonNullValueInput | InputJsonValue
    disconnectionReasonCode?: NullableStringFieldUpdateOperationsInput | string | null
    typebot?: NullableJsonNullValueInput | InputJsonValue
    warmupStats?: WarmupStatsUpdateOneWithoutInstanceNestedInput
  }

  export type InstanceUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    instanceName?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    number?: NullableStringFieldUpdateOperationsInput | string | null
    ownerJid?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    integration?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    profileName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disconnectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disconnectionObject?: NullableJsonNullValueInput | InputJsonValue
    disconnectionReasonCode?: NullableStringFieldUpdateOperationsInput | string | null
    typebot?: NullableJsonNullValueInput | InputJsonValue
    warmupStats?: WarmupStatsUncheckedUpdateOneWithoutInstanceNestedInput
  }

  export type InstanceUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    instanceName?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    number?: NullableStringFieldUpdateOperationsInput | string | null
    ownerJid?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    integration?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    profileName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disconnectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disconnectionObject?: NullableJsonNullValueInput | InputJsonValue
    disconnectionReasonCode?: NullableStringFieldUpdateOperationsInput | string | null
    typebot?: NullableJsonNullValueInput | InputJsonValue
  }

  export type WarmupStatsUpdateWithoutUserInput = {
    status?: StringFieldUpdateOperationsInput | string
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    warmupTime?: IntFieldUpdateOperationsInput | number
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pauseTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaStats?: MediaStatsUpdateOneWithoutWarmupStatsSentNestedInput
    mediaReceived?: MediaStatsUpdateOneWithoutWarmupStatsReceivedNestedInput
    instance?: InstanceUpdateOneRequiredWithoutWarmupStatsNestedInput
  }

  export type WarmupStatsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    instanceName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    warmupTime?: IntFieldUpdateOperationsInput | number
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pauseTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaStatsId?: NullableIntFieldUpdateOperationsInput | number | null
    mediaReceivedId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WarmupStatsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    instanceName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    warmupTime?: IntFieldUpdateOperationsInput | number
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pauseTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaStatsId?: NullableIntFieldUpdateOperationsInput | number | null
    mediaReceivedId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WarmupStatsCreateManyMediaStatsInput = {
    id?: number
    instanceName: string
    status?: string
    messagesSent?: number
    messagesReceived?: number
    warmupTime?: number
    lastActive?: Date | string
    startTime?: Date | string | null
    pauseTime?: Date | string | null
    progress?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    mediaReceivedId?: number | null
  }

  export type WarmupStatsCreateManyMediaReceivedInput = {
    id?: number
    instanceName: string
    status?: string
    messagesSent?: number
    messagesReceived?: number
    warmupTime?: number
    lastActive?: Date | string
    startTime?: Date | string | null
    pauseTime?: Date | string | null
    progress?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    mediaStatsId?: number | null
  }

  export type WarmupStatsUpdateWithoutMediaStatsInput = {
    status?: StringFieldUpdateOperationsInput | string
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    warmupTime?: IntFieldUpdateOperationsInput | number
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pauseTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaReceived?: MediaStatsUpdateOneWithoutWarmupStatsReceivedNestedInput
    user?: UserUpdateOneRequiredWithoutWarmupStatsNestedInput
    instance?: InstanceUpdateOneRequiredWithoutWarmupStatsNestedInput
  }

  export type WarmupStatsUncheckedUpdateWithoutMediaStatsInput = {
    id?: IntFieldUpdateOperationsInput | number
    instanceName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    warmupTime?: IntFieldUpdateOperationsInput | number
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pauseTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaReceivedId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WarmupStatsUncheckedUpdateManyWithoutMediaStatsInput = {
    id?: IntFieldUpdateOperationsInput | number
    instanceName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    warmupTime?: IntFieldUpdateOperationsInput | number
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pauseTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaReceivedId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WarmupStatsUpdateWithoutMediaReceivedInput = {
    status?: StringFieldUpdateOperationsInput | string
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    warmupTime?: IntFieldUpdateOperationsInput | number
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pauseTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaStats?: MediaStatsUpdateOneWithoutWarmupStatsSentNestedInput
    user?: UserUpdateOneRequiredWithoutWarmupStatsNestedInput
    instance?: InstanceUpdateOneRequiredWithoutWarmupStatsNestedInput
  }

  export type WarmupStatsUncheckedUpdateWithoutMediaReceivedInput = {
    id?: IntFieldUpdateOperationsInput | number
    instanceName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    warmupTime?: IntFieldUpdateOperationsInput | number
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pauseTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaStatsId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WarmupStatsUncheckedUpdateManyWithoutMediaReceivedInput = {
    id?: IntFieldUpdateOperationsInput | number
    instanceName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    messagesSent?: IntFieldUpdateOperationsInput | number
    messagesReceived?: IntFieldUpdateOperationsInput | number
    warmupTime?: IntFieldUpdateOperationsInput | number
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pauseTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaStatsId?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}